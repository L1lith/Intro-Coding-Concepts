{"version":3,"file":"component---src-pages-vision-logic-models-explained-en-js-12fbcee09ba8940b2a75.js","mappings":"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","sources":["webpack://your-first-rpg/./src/components/Dictionary/en/BooleanDef.js","webpack://your-first-rpg/./src/components/Dictionary/en/Output.js","webpack://your-first-rpg/./src/functions/isChildNull.js","webpack://your-first-rpg/./src/components/EasterEgg.js","webpack://your-first-rpg/./src/styles/EasterEgg.module.scss","webpack://your-first-rpg/./src/functions/mergeRefs.js","webpack://your-first-rpg/./src/functions/useClickToggle.js","webpack://your-first-rpg/./src/functions/useHover.js","webpack://your-first-rpg/./src/functions/useSmartToggle.js","webpack://your-first-rpg/./src/components/HoverDefinition.js","webpack://your-first-rpg/./src/styles/HoverDefinition.module.scss","webpack://your-first-rpg/./src/styles/YTVideo.module.scss","webpack://your-first-rpg/./src/components/YTVideo.js","webpack://your-first-rpg/./src/functions/hoverVideo.js","webpack://your-first-rpg/./src/components/Dictionary/en/Stack.js","webpack://your-first-rpg/./src/pages/vision/logic-models-explained.en.js","webpack://your-first-rpg/./src/styles/vision/logic-models-explained.module.scss"],"sourcesContent":["import HoverDefinition from '../../HoverDefinition'\n\nconst BooleanDef = props => (\n  <HoverDefinition\n    definition=\"A boolean is something that is either true or false, like a yes or no question\"\n    {...props}\n  >\n    {props.children || 'boolean'}\n  </HoverDefinition>\n)\n\nexport default BooleanDef\n","import HoverDefinition from '../../HoverDefinition'\n\nconst Output = props => (\n  <HoverDefinition definition=\"Your output is the result of your logic model\" {...props}>\n    {props.children || 'output'}\n  </HoverDefinition>\n)\n\nexport default Output\n","function isChildNull(children) {\n  if (Array.isArray(children)) return children.some(child => !isChildNull(child))\n\n  return !!children?.type\n}\n\nexport default isChildNull\n","import isChildNull from '../functions/isChildNull'\nimport { easterEgg } from '../styles/EasterEgg.module.scss'\nimport { useState, Fragment } from 'react'\n\nfunction EasterEgg(props) {\n  if (isChildNull(props.children)) throw new Error('Children are required for easter :)')\n  const [isActive, setActive] = useState(false)\n  return (\n    <Fragment>\n      <span\n        className={easterEgg}\n        onClick={() => {\n          setActive(!isActive) // Toggleable\n        }}\n      >\n        {isActive === true ? 'üê£' : 'ü•ö'}\n      </span>\n      {isActive === true ? props.children : null}\n    </Fragment>\n  )\n}\n\nexport default EasterEgg\n","// extracted by mini-css-extract-plugin\nexport var easterEgg = \"EasterEgg-module--easterEgg--vN6A1\";\nexport var rainbow = \"EasterEgg-module--rainbow--npPc3\";","const mergeRefs = (...refs) => {\n  const filteredRefs = refs.filter(Boolean)\n  if (!filteredRefs.length) return null\n  if (filteredRefs.length === 0) return filteredRefs[0]\n  return inst => {\n    for (const ref of filteredRefs) {\n      if (typeof ref === 'function') {\n        ref(inst)\n      } else if (ref) {\n        ref.current = inst\n      }\n    }\n  }\n}\n\nexport default mergeRefs\n","import { useState, useEffect, useRef } from 'react'\n\n// Hook\nfunction useClickToggle() {\n  const [active, setActive] = useState(false)\n  const ref = useRef(null)\n  useEffect(() => {\n    const listener = event => {\n      // Do nothing if clicking ref's element or descendent elements\n      if (!ref.current || ref.current.contains(event.target)) {\n        setActive(true)\n      } else {\n        setActive(false)\n      }\n    }\n\n    document.addEventListener('mousedown', listener)\n    document.addEventListener('touchstart', listener)\n\n    return () => {\n      document.removeEventListener('mousedown', listener)\n      document.removeEventListener('touchstart', listener)\n    }\n  })\n  return [ref, active]\n}\n\nexport default useClickToggle\n","import { useState, useRef, useEffect } from 'react'\n\nfunction useHover() {\n  const [value, setValue] = useState(false)\n\n  const ref = useRef(null)\n\n  const handleMouseOver = () => setValue(true)\n  const handleMouseOut = () => setValue(false)\n\n  useEffect(\n    () => {\n      const node = ref.current\n      if (node) {\n        node.addEventListener('mouseover', handleMouseOver)\n        node.addEventListener('mouseout', handleMouseOut)\n\n        return () => {\n          node.removeEventListener('mouseover', handleMouseOver)\n          node.removeEventListener('mouseout', handleMouseOut)\n        }\n      }\n    },\n    [ref.current] // Recall only if ref changes\n  )\n\n  return [ref, value]\n}\n\nexport default useHover\n","import mergeRefs from './mergeRefs'\nimport useClickToggle from './useClickToggle'\nimport useHover from './useHover'\nimport { useRef, useEffect, useState } from 'react'\n\nfunction useSmartToggle() {\n  const myRef = useRef(null)\n  const [active, setActive] = useState(false)\n\n  const [hoverRef, isHovered] = useHover()\n  const [toggleRef, isToggled] = useClickToggle()\n\n  const shouldBeActive = isHovered || isToggled\n  if (shouldBeActive !== active) {\n    setActive(shouldBeActive)\n  }\n  return [mergeRefs(hoverRef, toggleRef), active]\n}\n\nexport default useSmartToggle\n","import useSmartToggle from '../functions/useSmartToggle'\nimport { definition, hoverDefinition, up } from '../styles/HoverDefinition.module.scss'\n\n// const validDirections = ['up', 'left', 'down', 'right']\n\n// const directionMap = {\n//   up,\n//   down,\n//   left,\n//   right\n// }\n\nfunction HoverDefinition(props) {\n  const [ref, isActive] = useSmartToggle()\n  if (typeof props.children != 'string') throw new Error('Expected a text child')\n  if (typeof props.definition != 'string') throw new Error('Expected a definition')\n  // const direction = props.hasOwnProperty('direction') ? props.direction : 'up'\n  // if (!validDirections.includes(direction)) throw new Error('Invalid Direction Specified')\n  return (\n    <span className={hoverDefinition} ref={ref}>\n      {isActive ? <span className={definition + ' ' + up}>{props.definition}</span> : null}\n      {props.children}\n    </span>\n  )\n}\n\nexport default HoverDefinition\n","// extracted by mini-css-extract-plugin\nexport var hoverDefinition = \"HoverDefinition-module--hover-definition--UaMyO\";\nexport var definition = \"HoverDefinition-module--definition--yVWLg\";\nexport var up = \"HoverDefinition-module--up--SLxoS\";\nexport var bottom = \"HoverDefinition-module--bottom---y5Y4\";\nexport var left = \"HoverDefinition-module--left--S+vWc\";\nexport var right = \"HoverDefinition-module--right--MhYaV\";","// extracted by mini-css-extract-plugin\nexport var youtubeContainer = \"YTVideo-module--youtubeContainer--zCB2A\";\nexport var disabled = \"YTVideo-module--disabled--HEa7g\";","import { youtubeContainer, disabled } from '../styles/YTVideo.module.scss'\nimport { useState, Fragment } from 'react'\n\nconst urlRegex = /^[0-9A-Za-z_-]{10}[048AEIMQUYcgkosw]$/i\n\nfunction YTVideo(props = { url }) {\n  const [isOpen, setOpen] = useState(false)\n  const { url, query = {} } = props\n  if (\n    props.hasOwnProperty('query') &&\n    (typeof query != 'object' || query === null || Object.keys(query).length < 1)\n  )\n    throw new Error('Please provide a valid query object')\n  if (typeof url !== 'string') {\n    console.warn(new Error('Expected a video url'))\n    return null\n  }\n  query.autoplay = 1 // Currently autoplay is broken, it is always applied when the video loads, but the video only loads after you click the image and at the moment there's no way to skip clicking the image so we just enforce autoplay for the hot-swapped youtube embed\n  if (!urlRegex.test(url)) throw new Error('This url is invalid')\n  const videoURL =\n    'https://www.youtube.com/embed/' +\n    url +\n    `?` +\n    Object.entries(query)\n      .map(([key, value]) => `${key}=${encodeURIComponent(value)}`)\n      .join('&')\n  const parentProps = { ...props }\n  delete parentProps.url\n  delete parentProps.children\n  return (\n    <div\n      {...parentProps}\n      className={\n        youtubeContainer + ' youtube-container'\n        // 'youtube-container' + (typeof props.className == 'string' ? ' ' + props.className : '')\n      }\n    >\n      {!isOpen ? (\n        <Fragment>\n          <img\n            onClick={() => setOpen(true)}\n            src={\n              props.hasOwnProperty('thumbnail')\n                ? props.thumbnail\n                : `https://img.youtube.com/vi/${url}/hqdefault.jpg`\n            }\n            alt=\"Youtube Video\"\n          />\n          <span>‚ñ∂</span>\n        </Fragment>\n      ) : null}\n      <iframe\n        className={isOpen ? null : disabled}\n        src={isOpen ? videoURL : null}\n        title=\"YouTube video player\"\n        frameBorder=\"0\"\n        sandbox=\"allow-scripts allow-same-origin\"\n        allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n        allowFullScreen\n      />\n    </div>\n  )\n}\n\nexport default YTVideo\n","function hoverVideo() {\n  let mouseOver = false\n  const output = {}\n  output.onMouseOver = event => {\n    mouseOver = true\n    event.target.play()\n  }\n  output.onMouseOut = () => {\n    mouseOver = false\n  }\n  output.onEnded = event => {\n    if (mouseOver === true) event.target.play()\n  }\n  return output\n}\n\nexport default hoverVideo\n","import HoverDefinition from '../../HoverDefinition'\n\nconst Stack = props => (\n  <HoverDefinition\n    definition=\"Your stack is the list of software/apps that you use to code\"\n    {...props}\n  >\n    {props.children || 'stack'}\n  </HoverDefinition>\n)\n\nexport default Stack\n","import BooleanDef from '../../components/Dictionary/en/BooleanDef'\nimport Output from '../../components/Dictionary/en/Output'\nimport Stack from '../../components/Dictionary/en/Stack'\nimport EasterEgg from '../../components/EasterEgg'\nimport Link from '../../components/TranslatedLink'\nimport YTVideo from '../../components/YTVideo'\nimport hoverVideo from '../../functions/hoverVideo'\nimport {\n  logicModelChart,\n  trafficStop\n} from '../../styles/vision/logic-models-explained.module.scss'\nimport { Helmet } from 'react-helmet'\n\nexport default function LogicModelsExplained() {\n  return (\n    <div className=\"logic-models\">\n      <Helmet>\n        <meta name=\"description\" content=\"Arranging Logic Models\" />\n        <title>üß† Logic Models Explained</title>\n      </Helmet>\n      <h2>#1.1 üß† Logic Models Explained</h2>\n      <br />\n      <span className=\"introCard\">\n        <video autoPlay {...hoverVideo()} muted>\n          <source src=\"/video/redstoneContraption.webm\" type=\"video/webm\" />\n        </video>\n        Minecraft is a great place to start your adventure &#58;&#41;\n      </span>\n      <p>\n        Next you will learn about <BooleanDef /> logic and how to visualize them. Visualizing\n        logical systems is very useful. The entire world operates using logic; like how you do your\n        job, how you cross the street, or how you navigate a website. We make a lot of decisions\n        without realizing we made them.\n      </p>\n      {\n        null /*<span className=\"introCard\">\n      <img src=\"/images/spaghettiBowl.jpeg\" alt=\"SLC Spaghetti Bowl\" />\n      Nothing gets the blood pumping quite like being tail-gated around a 90¬∞ turn on the freeway.\n      <span className=\"smallerText\">\n        {' '}\n        Credit to <a target=\"_blank\" href=\"https://www.utahseagull.com/2019/10/\">Utah Seagull</a>\n      </span>\n    </span> */\n      }\n      <p>\n        All logic models have 3 basic components\n        <ol className={logicModelChart}>\n          <li>\n            <span className=\"bold\">Input Data: </span>An incoming source of data to your logic model\n            which you can use to make decisions.\n          </li>\n          <li>\n            <span className=\"bold\">Rules:</span> This is the \"logic\" or \"code\" of your model. The\n            rules are used to decide what the result (or output) of our model is based on the input.\n          </li>\n          <li>\n            <span className=\"bold\">Output Data: </span>What the result of your logic model is.\n          </li>\n        </ol>\n        <br />\n        <br />\n        Imagine you are a civil engineer trying to optimize the flow of traffic through a very busy\n        area. Our input data is the flow of cars into the freeway and their intended destinations.\n        Our <Output /> is the flow of cars out of the freeway. As a civil engineer our logic model\n        will not only make the difference when someone's trying to get to work quickly, but our\n        decision will ultimately be the difference between life and death when reckless driving\n        happens.\n        <br />\n        <br />\n        While watching this video try to notice all the factors civil engineers must pay attention\n        to when designing highways.\n      </p>\n      <YTVideo url=\"9XIjqdk69O4\" thumbnail=\"/images/highway-geometry.jpg\" />\n      <p>\n        \"That's great... but how does this apply to coding?\" I'm glad you asked! When we are coding\n        we too are writing a logic system to handle the input flow of information (like mouse and\n        keyboard input when navigating a webpage) and the <Output /> flow of information (like\n        displaying a webpage or rendering a video-game). As a coder you write (or \"code\") the\n        logical rules of the system (like when the user clicks this link, take them to that page).\n        While say inventing a computer or a roadway from scratch might be incredibly complex,\n        computer, civil, and all kinds of engineers all take advantage of the technology and\n        methodology that has been been in development for much longer than we have been alive.\n      </p>\n      Here's a table describing the logic model we use when we are at a traffic light. Your brain\n      provides the decision-making rules of the logic model.\n      <table className={trafficStop}>\n        <thead>\n          <th>Input (Geographical Area)</th>\n          <th>Output (Road Type)</th>\n        </thead>\n        <tr>\n          <td>A relatively flat countryside</td>\n          <td>A long, straight, and fast-moving highway</td>\n        </tr>\n        <tr>\n          <td>A steep mountainside</td>\n          <td>A winding, slow-moving road with a lot of signs</td>\n        </tr>\n        <tr>\n          <td>A crowded city</td>\n          <td>A very wide freeway with lots of entrances and exits</td>\n        </tr>\n      </table>\n      <p>\n        In coding we have a set of software and methodology that makes describing our logical system\n        much easier. In the world of website development, we call this a <Stack />. Much like a\n        civil engineer must consider the efficacy of a roadway system, when building a website we\n        must consider many aspects of the system, like cyber safety (allowing unsafe input data has\n        led to many stolen identities and credit cards), user experience, and visual appeal. By\n        better understanding the logical rules behind our software we better understand where this\n        issues arise, preventing catastrophic database leaks and user rage-quits before they ever\n        happen.\n        <br />\n        <br />\n      </p>\n      <YTVideo url=\"qybUFnY7Y8w\" thumbnail=\"/images/this-too-shall-pass.jpg\" />\n      <span className=\"italic\">it works perfectly 60% of the time!</span>\n      <p>\n        When designing software systems it's important to think it through from beginning to end.\n        Most software bugs stem from coders thinking \"it's not my job\" or not putting that extra\n        effort to consider edge cases because \"it worked when I ran it\". You must remember the 3\n        components of your logic model, so first consider your user{' '}\n        <span className=\"bold\">input</span>. When navigating a site the user gives many inputs, like\n        clicking a link, scrolling the page, logging in, or submitting a form.\n        <br />\n        <br />\n        Next you must think about every step in your code, and how these{' '}\n        <span className=\"bold\">rules</span> ultimately handles your users input and translates it\n        into the program's <Output />. Don't cut corners or leave problems for someone else to deal\n        with. Building the best software you can the first time (you'll definitely write some messy\n        code starting out, but after you make your first draft of something try to come back and\n        look for ways to improve it) will save you a lot of time later on. Understand the deep inner\n        workings of your <Stack /> by{' '}\n        <span className=\"underline\">toying around with it and asking questions</span>\n        !\n        <br />\n        <br />\n        The <Output /> is what the users of your software experience (this is a{' '}\n        <span className=\"underline\">critical</span> aspect of your logic model), so when coding you\n        must always think about what your users are trying to achieve, and not only all the possible\n        issues and bugs they could run into, but also how to make your software straightforward and\n        convenient. Like good road design, your software should effectively serve your users,\n        instead of forcing your users to be focused on tediously tinkering with poorly designed\n        software. Take responsibility as an engineer for avoidable crashes and other design issues\n        that arise with your software.\n      </p>\n      <Link className=\"next\" to=\"/toying\">\n        Next: #2.0 üß© Playing around with Logic Puzzles\n      </Link>\n      <br />\n      <br />\n      <EasterEgg>\n        <p>Bonus: Liked the Rube Goldberg Machine?</p>\n        <YTVideo url=\"Av07QiqmsoA\" thumbnail=\"/images/lifes-lemons.jpg\" />\n      </EasterEgg>\n    </div>\n  )\n}\n","// extracted by mini-css-extract-plugin\nexport var trafficStop = \"logic-models-explained-module--trafficStop--oj9e-\";\nexport var logicModelChart = \"logic-models-explained-module--logicModelChart--mYYlH\";"],"names":["props","definition","children","isChildNull","Array","isArray","some","child","type","Error","useState","isActive","setActive","Fragment","className","onClick","refs","filteredRefs","filter","Boolean","length","inst","ref","current","active","useRef","useEffect","listener","event","contains","target","document","addEventListener","removeEventListener","value","setValue","handleMouseOver","handleMouseOut","node","useHover","hoverRef","isHovered","useClickToggle","toggleRef","isToggled","shouldBeActive","mergeRefs","useSmartToggle","urlRegex","url","isOpen","setOpen","query","hasOwnProperty","Object","keys","console","warn","autoplay","test","videoURL","entries","map","key","encodeURIComponent","join","parentProps","youtubeContainer","src","thumbnail","alt","title","frameBorder","sandbox","allow","allowFullScreen","mouseOver","output","play","HoverDefinition","LogicModelsExplained","Helmet","name","content","autoPlay","hoverVideo","muted","BooleanDef","logicModelChart","Output","YTVideo","trafficStop","to","EasterEgg"],"sourceRoot":""}