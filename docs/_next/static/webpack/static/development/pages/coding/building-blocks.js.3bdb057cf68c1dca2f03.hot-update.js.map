{"version":3,"file":"static/webpack/static/development/pages/coding/building-blocks.js.3bdb057cf68c1dca2f03.hot-update.js","sources":["webpack:///./pages/coding/building-blocks.js"],"sourcesContent":["import Link from 'next/link'\nimport CodeSandbox from '../../components/CodeSandbox'\nimport './building-blocks.scss'\nimport { Component } from 'react'\n\nclass ShittyChecking extends Component {\n  constructor(props) {\n    super(props)\n    this.state = { opened: false }\n  }\n  render() {\n    return (\n      <div className=\"checking-example\">\n        <span className=\"app-title\">üçé Accounting</span>\n        <span className=\"balance\">\n          {this.state.opened === true ? (\n            'Balance: Unavailable'\n          ) : (\n            <button\n              onClick={() => {\n                this.setState({ opened: true })\n              }}\n              className=\"enter\">\n              View your Balance\n            </button>\n          )}\n        </span>\n        <span className=\"info\">\n          Please close the app and wait for your next transaction notification.\n        </span>\n      </div>\n    )\n  }\n}\n\nexport default () => (\n  <div className=\"building-blocks\">\n    <h1 className=\"title\">#3.2 Coding Building Blocks</h1>\n    <br />\n    <span className=\"intro-card\">\n      <div className=\"youtube-container\">\n        <iframe\n          src=\"https://www.youtube.com/embed/fR-A3BNTUN4\"\n          title=\"YouTube video player\"\n          frameBorder=\"0\"\n          allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n          allowFullScreen\n        />\n      </div>\n      <br />\n      How do you swallow a coding lesson? One byte at a time\n    </span>\n    <p>\n      You probably have a lot of information in your head from the last section, try to do your best\n      to connect that information with the upcoming tasks. In this section we will be using our\n      primitive data types to build logic models in JavaScript :) Once you finish this section you\n      will know basic coding! If you feel overwhelmed consider taking a break.\n      <br />\n      <br />\n      We will also be using something called \"console output\" in our editors, so you'll be seeing\n      some things that say \"console.log(...)\", and our program output will be whatever is inside the\n      parenthesis.\n    </p>\n    <div className=\"variables\">\n      <h2>Variables</h2>\n      <p>\n        We can create variables in order to store data values for later use. In a basic logic model\n        where we only have inputs and outputs it becomes incredibly difficult to deal with data that\n        persists (needs to be stored). Let's say you're writing a checking account app, but you're\n        not allowed to save any data. The user might see a notification saying \"You just spent\n        $10.52\", and yet every time they open the app they're greeted with this:\n      </p>\n\n      <ShittyChecking />\n\n      <p>\n        Sounds... wonderful. Instead of doing this we store variables in our memory (or in this case\n        the computer's memory) by names, and then retrieve or modify them later.\n        <br />\n        <br />\n        Here we name a variable called balance (note we do not give it any value yet so it defaults\n        to undefined)\n      </p>\n      <CodeSandbox value={'var balance\\nconsole.log(balance)'} consoleMode />\n      <p>\n        We can set a value using the assignment operator \"=\" and providing a value after it, and\n        once we have done this we can see our variable has a value now :)\n      </p>\n      <CodeSandbox value={'var balance = 14.24\\nconsole.log(balance)'} consoleMode />\n    </div>\n    <div className=\"functions\">\n      <h2>Functions</h2>\n      <p>\n        Functions let you section off individual logic models that serve as a utility. Functions\n        have a name, a set of inputs, a code section, and an output. You can re-use your function\n        multiple times with different inputs. Functions use parenthesis to create their inputs, and\n        later after they've been created we use parenthesis again to call it (calling a function\n        means to run it). The \"console.log\" part of our code is an example of a function (in this\n        case to output some data). It's called with parenthesis and is provided with the input of\n        what we want to output (which in the previous example was the balance variable's current\n        value).\n      </p>\n      <h2>Addition Function</h2>\n      <p>\n        While this function is mostly redundant, you could easily make a function to add two numbers\n        together.\n      </p>\n      <CodeSandbox\n        consoleMode\n        value={'function add(a, b){\\n    return a + b\\n}'}\n        className=\"short\"\n      />\n      <p>\n        The output is undefined because we made a <span className=\"bold\">declaration</span> instead\n        of a <span className=\"bold\">statement</span>.{' '}\n      </p>\n    </div>\n    <div className=\"console\">\n      <h2>More about the Console</h2>\n      On the previous page I was using the \"JavaScript Expression Evaluator\". On the right you would\n      see what output of the JS interpreter evaluating the code on the left side. Normally when\n      we're programming we are running our code from a terminal, and we see the output of the\n      console.log function in real-time instead of seeing the output of the JS evaluation. We only\n      need to output things to console.log when we as the developer (or coder) want to know what\n      their values are.\n      <br />\n      <br />\n      In this way\n    </div>\n    <CodeSandbox\n      consoleMode\n      value={'function add(a, b){\\n    return a + b\\n}\\nconsole.log(add(14, 16))'}\n      className=\"short\"\n    />\n    <br />\n    <div className=\"parenthesis\">\n      <h2>Parenthesis</h2>\n      Not only can you use parenthesis to change the ordering of math expressions, but you can also\n      use parenthesis to change the ordering of any other kind of expression. Here are some example\n      of changing the order of code evaluation using parenthesis for math and non-math purposes.\n      <br />\n      <br />\n      <h3>Math Without Parenthesis</h3>\n      <CodeSandbox consoleMode value=\"console.log(10 * 3 + 4)\" className=\"short\" />\n      <h3>Math With Parenthesis</h3>\n      <CodeSandbox consoleMode value=\"console.log(10 * (3 + 4))\" className=\"short\" />\n      <h3>Boolean logic without Parenthesis</h3>\n      <CodeSandbox consoleMode value=\"console.log(false && true || true)\" className=\"short\" />\n      <h3>Boolean logic with Parenthesis</h3>\n      <CodeSandbox consoleMode value=\"console.log(false && (true || true))\" className=\"short\" />\n    </div>\n    <br />\n    {\n      null /*<div className=\"user-sandbox\">\n      <h2>Sandbox</h2>\n      <p>\n        This is an extra editor you can use in case you have work going on in the editors and need\n        an empty space to code.\n      </p>\n      <CodeSandbox />\n</div>*/\n    }\n    <Link href=\"/coding/text-rpg\">\n      <a className=\"next\">Up next: Completing your Basic Coding Mental Models</a>\n    </Link>\n  </div>\n)\n"],"mappings":"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","sourceRoot":""}