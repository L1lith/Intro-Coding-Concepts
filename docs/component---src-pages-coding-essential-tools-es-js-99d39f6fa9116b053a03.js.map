{"version":3,"file":"component---src-pages-coding-essential-tools-es-js-99d39f6fa9116b053a03.js","mappings":"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","sources":["webpack://your-first-rpg/./src/components/Dictionary/es/Expression.js","webpack://your-first-rpg/./src/components/Dictionary/es/FunctionDef.js","webpack://your-first-rpg/./src/components/Dictionary/es/Input.js","webpack://your-first-rpg/./src/components/Dictionary/es/Interpreter.js","webpack://your-first-rpg/./src/components/Dictionary/es/JS.js","webpack://your-first-rpg/./src/components/Dictionary/es/Output.js","webpack://your-first-rpg/./src/components/Dictionary/es/Variable.js","webpack://your-first-rpg/./src/components/ShittyChecking.js","webpack://your-first-rpg/./src/styles/ShittyChecking.module.scss","webpack://your-first-rpg/./src/styles/YTVideo.module.scss","webpack://your-first-rpg/./src/components/YTVideo.js","webpack://your-first-rpg/./src/pages/coding/essential-tools.es.js"],"sourcesContent":["import HoverDefinition from '../../HoverDefinition'\n\nconst Expression = props => (\n  <HoverDefinition\n    definition={`Una \"expression\" es un fragmento de código que se puede reducir a un solo valor, como una ecuación matemática`}\n    {...props}>\n    {props.children || 'expression'}\n  </HoverDefinition>\n)\n\nexport default Expression\n","import HoverDefinition from '../../HoverDefinition'\n\nconst FunctionDef = props => (\n  <HoverDefinition\n    definition={`Una \"function\" es un fragmento de código reutilizable con su propio conjunto de entradas, reglas y salidas. ¡Es como un modelo lógico en miniatura que nos ahorra tiempo!`}\n    {...props}>\n    {props.children || 'function'}\n  </HoverDefinition>\n)\n\nexport default FunctionDef\n","import HoverDefinition from '../../HoverDefinition'\n\nconst Input = props => (\n  <HoverDefinition definition={`Tu \"input\" son datos que entran en tu modelo lógico`} {...props}>\n    {props.children || 'input'}\n  </HoverDefinition>\n)\n\nexport default Input\n","import HoverDefinition from '../../HoverDefinition'\n\nconst Interpreter = props => (\n  <HoverDefinition\n    definition={`El \"JavaScript Interpreter\" es el software que ejecuta su código, como el motor`}\n    {...props}>\n    {props.children || 'interpreter'}\n  </HoverDefinition>\n)\n\nexport default Interpreter\n","import HoverDefinition from '../../HoverDefinition'\n\nconst BooleanDef = props => (\n  <HoverDefinition\n    definition=\"JS es la abreviatura de JavaScript, el lenguaje de codificación\"\n    {...props}>\n    {props.children || 'JS'}\n  </HoverDefinition>\n)\n\nexport default BooleanDef\n","import HoverDefinition from '../../HoverDefinition'\n\nconst Output = props => (\n  <HoverDefinition definition={`Tu \"output\" es el resultado de tu modelo lógico`} {...props}>\n    {props.children || 'output'}\n  </HoverDefinition>\n)\n\nexport default Output\n","import HoverDefinition from '../../HoverDefinition'\n\nconst VariableDef = props => (\n  <HoverDefinition\n    definition={`Una \"variable\" contiene cualquier tipo de datos que desee. Tienen etiqueta y valor.`}\n    {...props}>\n    {props.children || 'variable'}\n  </HoverDefinition>\n)\n\nexport default VariableDef\n","import useTranslation from '../functions/useTranslation'\nimport { checkingExample, appTitle, balance, info } from '../styles/ShittyChecking.module.scss'\nimport { useState } from 'react'\n\nfunction ShittyChecking() {\n  const [opened, setOpened] = useState(false)\n  return (\n    <div className={checkingExample}>\n      <span className={appTitle}>{useTranslation('💸 Banking', { es: '💸 Bancario' })}</span>\n      <span className={balance}>\n        {opened === true ? (\n          useTranslation('Balance: Unavailable', { es: 'Saldo: no disponible' })\n        ) : (\n          <button\n            onClick={() => {\n              setOpened(true)\n            }}>\n            {useTranslation('View your Balance', { es: 'Ver su Saldo' })}\n          </button>\n        )}\n      </span>\n      <span className={info}>\n        {opened !== true\n          ? null\n          : useTranslation(\n              'Please close the app and wait for your next transaction notification.',\n              { es: 'Cierre la aplicación y espere la próxima notificación de transacción.' }\n            )}\n      </span>\n    </div>\n  )\n}\n\nexport default ShittyChecking\n","// extracted by mini-css-extract-plugin\nexport var checkingExample = \"ShittyChecking-module--checkingExample--f1+bO\";\nexport var appTitle = \"ShittyChecking-module--appTitle--xIu5Y\";\nexport var balance = \"ShittyChecking-module--balance---cg03\";\nexport var info = \"ShittyChecking-module--info--KNkbV\";","// extracted by mini-css-extract-plugin\nexport var youtubeContainer = \"YTVideo-module--youtubeContainer--zCB2A\";\nexport var disabled = \"YTVideo-module--disabled--HEa7g\";","import { youtubeContainer, disabled } from '../styles/YTVideo.module.scss'\nimport { useState, Fragment } from 'react'\n\nconst urlRegex = /^[0-9A-Za-z_-]{10}[048AEIMQUYcgkosw]$/i\n\nfunction YTVideo(props = { url }) {\n  const [isOpen, setOpen] = useState(false)\n  const { url, query = {} } = props\n  if (\n    props.hasOwnProperty('query') &&\n    (typeof query != 'object' || query === null || Object.keys(query).length < 1)\n  )\n    throw new Error('Please provide a valid query object')\n  if (typeof url !== 'string') {\n    console.warn(new Error('Expected a video url'))\n    return null\n  }\n  query.autoplay = 1 // Currently autoplay is broken, it is always applied when the video loads, but the video only loads after you click the image and at the moment there's no way to skip clicking the image so we just enforce autoplay for the hot-swapped youtube embed\n  if (!urlRegex.test(url)) throw new Error('This url is invalid')\n  const videoURL =\n    'https://www.youtube.com/embed/' +\n    url +\n    `?` +\n    Object.entries(query)\n      .map(([key, value]) => `${key}=${encodeURIComponent(value)}`)\n      .join('&')\n  const parentProps = { ...props }\n  delete parentProps.url\n  delete parentProps.children\n  return (\n    <div\n      {...parentProps}\n      className={\n        youtubeContainer + ' youtube-container'\n        // 'youtube-container' + (typeof props.className == 'string' ? ' ' + props.className : '')\n      }\n    >\n      {!isOpen ? (\n        <Fragment>\n          <img\n            onClick={() => setOpen(true)}\n            src={\n              props.hasOwnProperty('thumbnail')\n                ? props.thumbnail\n                : `https://img.youtube.com/vi/${url}/hqdefault.jpg`\n            }\n            alt=\"Youtube Video\"\n          />\n          <span>▶</span>\n        </Fragment>\n      ) : null}\n      <iframe\n        className={isOpen ? null : disabled}\n        src={isOpen ? videoURL : null}\n        title=\"YouTube video player\"\n        frameBorder=\"0\"\n        sandbox=\"allow-scripts allow-same-origin\"\n        allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n        allowFullScreen\n      />\n    </div>\n  )\n}\n\nexport default YTVideo\n","import CodeSandbox from '../../components/CodeSandbox'\nimport Expression from '../../components/Dictionary/es/Expression'\nimport FunctionDef from '../../components/Dictionary/es/FunctionDef'\nimport Input from '../../components/Dictionary/es/Input'\nimport Interpreter from '../../components/Dictionary/es/Interpreter'\nimport JS from '../../components/Dictionary/es/JS'\nimport Output from '../../components/Dictionary/es/Output'\nimport Variable from '../../components/Dictionary/es/Variable'\nimport ShittyChecking from '../../components/ShittyChecking'\nimport Link from '../../components/TranslatedLink'\nimport YTVideo from '../../components/YTVideo'\nimport { Helmet } from 'react-helmet'\n\nexport default function EssentialTools() {\n  return (\n    <div>\n      <Helmet>\n        <title>🔨 Herramientas esenciales</title>\n        <meta\n          name=\"description\"\n          content=\"Aprenda las herramientas de codificación esenciales para comenzar en JavaScript \"\n        />\n      </Helmet>\n      <h1>#3.2 🔨 Herramientas esenciales</h1>\n      {\n        null /*<span className=\"introCard\">\n        <YTVideo url=\"himmatLe7aQ\" query={{ start: 32 }} thumbnail=\"/images/melinda-mae.jpg\" />\n        <span>How do you swallow a coding lesson? One byte at a time</span>\n      </span> */\n      }\n\n      <p>\n        Probablemente tenga mucha información en su cabeza de la última sección, intente hacer todo\n        lo posible para conectar esa información con las próximas tareas. En esta sección\n        aprenderemos algunas herramientas 🔨 que nos ayudarán a construir modelos lógicos en\n        JavaScript de manera más efectiva. ¡Una vez que termines esta sección, conocerás la\n        codificación básica! Si te sientes abrumado, considera tomarte un descanso.\n        <br />\n        <br />\n        También usaremos el modo \"terminal\" en lugar del modo \"<Expression /> evaluator\" en nuestros\n        editores, por lo que verá algunas cosas que dicen \"console.log (...)\", y la <Output /> de\n        nuestro programa será lo que esté dentro del parenthesis ( esto se llama una <FunctionDef />\n        , hay más sobre esto a continuación).\n      </p>\n      <div>\n        <h2>Variables</h2>\n        <p>\n          Podemos crear <Variable>variables</Variable> para almacenar (guardar) valores de datos\n          para su uso posterior. En un modelo lógico básico en el que solo tenemos{' '}\n          <Input>inputs</Input> y <Output>outputs</Output>, se vuelve increíblemente difícil tratar\n          con datos que persisten (deben guardarse). Digamos que está escribiendo una aplicación de\n          cuenta corriente, pero no puede guardar ningún dato. El usuario puede ver una notificación\n          que dice \"Acabas de gastar $ 10.52\" y, sin embargo, cada vez que abre la aplicación es\n          recibido con esto:\n          <br />\n          <span className=\"bold\">(intenta usar la aplicación a continuación)</span>\n        </p>\n\n        <ShittyChecking />\n\n        <p>\n          ¡Esto sería tan molesto! En lugar de hacer esto, almacenamos{' '}\n          <Variable>variables</Variable> en nuestra memoria (o en este caso, en la memoria de la\n          computadora) dándoles nombres, y luego podemos recuperarlas o modificarlas más adelante\n          cuando las necesitemos.\n          <br />\n          <br />\n          Aquí nombramos una <Variable /> llamada saldo (tenga en cuenta que todavía no le damos\n          ningún valor, por lo que por defecto es undefined)\n        </p>\n        <CodeSandbox className=\"mini\" value={'var balance\\nconsole.log(balance)'} consoleMode />\n        <p>\n          Podemos establecer un valor usando el operador de asignación \"=\" y poniendo el valor que\n          queremos después, y una vez que hayamos hecho esto, podemos ver que nuestra <Variable />{' '}\n          tiene un valor ahora :)\n        </p>\n        <CodeSandbox\n          className=\"mini\"\n          value={'var balance = 14.24\\nconsole.log(balance)'}\n          consoleMode\n        />\n      </div>\n      <div className=\"functions\">\n        <h2>Functions</h2>\n        <p>\n          Las <FunctionDef>functions</FunctionDef> le permiten crear piezas de código reutilizables\n          que sirven como herramienta (como un modelo de cómo hacer algo). Las funciones tienen un\n          nombre, un conjunto de <Input>inputs</Input>, una sección de código y una{' '}\n          <Output>output</Output> (usamos \"retorno\" para especificar la <Output>output</Output>).\n          Las <FunctionDef>functions</FunctionDef> pueden ahorrarle mucho tiempo porque puede\n          reutilizar su <FunctionDef>function</FunctionDef> varias veces con diferentes{' '}\n          <Input>Inputs</Input>, en lugar de tener que escribir ese código una y otra vez. Las{' '}\n          <FunctionDef>functions</FunctionDef> usan parenthesis para crear sus <Input>inputs</Input>{' '}\n          y corchetes (se ven así {}). Después de haber creado nuestra <FunctionDef />, usamos\n          parenthesis nuevamente para llamarla (llamar a una <FunctionDef /> significa ejecutarla).\n          La parte \"console.log\" de nuestro código es un ejemplo de una <FunctionDef /> (en este\n          caso, para <Output /> algunos datos). Esta <FunctionDef>function</FunctionDef> no tiene\n          que ser creada por nosotros porque el <Interpreter>JS Interpreter</Interpreter> nos la\n          proporciona automáticamente. Se llama (llamar a una <FunctionDef>function</FunctionDef>{' '}\n          significa ejecutarla) con parenthesis y puede hacer diferentes cosas dependiendo de cuál\n          sea la <Input /> que le pongamos (que en el ejemplo anterior era el valor actual de la{' '}\n          <Variable /> balance).\n        </p>\n        <h2>Addition Function</h2>\n        <p>\n          Si bien esta <FunctionDef /> es en su mayoría redundante, podría crear fácilmente una{' '}\n          <FunctionDef /> para sumar dos números.\n        </p>\n        <CodeSandbox\n          consoleMode\n          value={'function agregar(a, b){\\n    return a + b\\n}'}\n          className=\"short\"\n        />\n        <p>\n          El <Output /> está vacío porque no registramos nada en la consola.\n        </p>\n      </div>\n      <div className=\"console\">\n        <h2>More about the Console</h2>\n        Más sobre la Consola En la página anterior, estaba usando el \"Evaluador de expresiones de\n        JavaScript\". A la derecha, verá qué <Output /> del <Interpreter>\n          JS interpreter\n        </Interpreter>{' '}\n        evalúa el código en el lado izquierdo. Normalmente, cuando codificamos, ejecutamos nuestro\n        código desde una terminal y vemos el resultado de la <FunctionDef /> console.log en tiempo\n        real en lugar de ver el resultado de la evaluación del código <JS />. Solo necesitamos\n        generar valores usando console.log cuando nosotros, como desarrolladores (o codificadores),\n        queremos saber cuáles son esos valores, de esa manera la <Output /> de nuestro programa no\n        se abarrota demasiado.\n      </div>\n      <CodeSandbox\n        consoleMode\n        value={'function agregar(a, b){\\n    return a + b\\n}\\nconsole.log(agregar(14, 16))'}\n        className=\"short\"\n      />\n      <div className=\"parenthesis\">\n        <h2>Parenthesis</h2>\n        Paréntesis No solo puede usar parenthesis para cambiar el orden de las{' '}\n        <Expression>expressions</Expression> matemáticas, sino que también puede usar parenthesis\n        para cambiar el orden de cualquier otro tipo de <Expression />. Estos son algunos ejemplos\n        de cómo cambiar el orden de evaluación del código usando parenthesis para fines matemáticos\n        y no matemáticos.\n        <br />\n        <br />\n        <h3>Matemáticas sin parenthesis</h3>\n        <CodeSandbox consoleMode value=\"console.log(10 * 3 + 4)\" className=\"mini\" />\n        <h3>Matemáticas con parenthesis</h3>\n        <CodeSandbox consoleMode value=\"console.log(10 * (3 + 4))\" className=\"mini\" />\n        <h3>Lógica Boolean sin parenthesis</h3>\n        <CodeSandbox consoleMode value=\"console.log(false && true || true)\" className=\"mini\" />\n        <h3>Lógica Boolean sin parenthesis</h3>\n        <CodeSandbox consoleMode value=\"console.log(false && (true || true))\" className=\"mini\" />\n      </div>\n      <br />\n      <Link className=\"next\" to=\"/rpg\">\n        Siguiente: #4.0 Construyendo un juego!\n      </Link>\n    </div>\n  )\n}\n"],"names":["props","definition","children","useState","opened","setOpened","className","useTranslation","es","onClick","urlRegex","url","isOpen","setOpen","query","hasOwnProperty","Object","keys","length","Error","console","warn","autoplay","test","videoURL","entries","map","key","value","encodeURIComponent","join","parentProps","youtubeContainer","Fragment","src","thumbnail","alt","title","frameBorder","sandbox","allow","allowFullScreen","EssentialTools","name","content","consoleMode","to"],"sourceRoot":""}