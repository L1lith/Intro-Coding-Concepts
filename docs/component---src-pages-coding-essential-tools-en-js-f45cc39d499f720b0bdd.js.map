{"version":3,"file":"component---src-pages-coding-essential-tools-en-js-f45cc39d499f720b0bdd.js","mappings":"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","sources":["webpack://your-first-rpg/./src/components/Dictionary/en/Expression.js","webpack://your-first-rpg/./src/components/Dictionary/en/FunctionDef.js","webpack://your-first-rpg/./src/components/Dictionary/en/Input.js","webpack://your-first-rpg/./src/components/Dictionary/en/Interpreter.js","webpack://your-first-rpg/./src/components/Dictionary/en/JS.js","webpack://your-first-rpg/./src/components/Dictionary/en/Variable.js","webpack://your-first-rpg/./src/components/ShittyChecking.js","webpack://your-first-rpg/./src/styles/ShittyChecking.module.scss","webpack://your-first-rpg/./src/styles/YTVideo.module.scss","webpack://your-first-rpg/./src/components/YTVideo.js","webpack://your-first-rpg/./src/pages/coding/essential-tools.en.js"],"sourcesContent":["import HoverDefinition from '../../HoverDefinition'\n\nconst Expression = props => (\n  <HoverDefinition\n    definition=\"An expression is a piece of code that can be reduced to a single value, like a math equation\"\n    {...props}\n  >\n    {props.children || 'expression'}\n  </HoverDefinition>\n)\n\nexport default Expression\n","import HoverDefinition from '../../HoverDefinition'\n\nconst FunctionDef = props => (\n  <HoverDefinition\n    definition=\"A function is a re-usable piece of code with it's own set of inputs, rules, and outputs. It's like a miniature logic model that saves us time!\"\n    {...props}\n  >\n    {props.children || 'function'}\n  </HoverDefinition>\n)\n\nexport default FunctionDef\n","import HoverDefinition from '../../HoverDefinition'\n\nconst Input = props => (\n  <HoverDefinition definition=\"Your input is data that goes into your logic model\" {...props}>\n    {props.children || 'input'}\n  </HoverDefinition>\n)\n\nexport default Input\n","import HoverDefinition from '../../HoverDefinition'\n\nconst Interpreter = props => (\n  <HoverDefinition\n    definition=\"The JavaScript interpreter is the software that runs your code, like the engine\"\n    {...props}\n  >\n    {props.children || 'interpreter'}\n  </HoverDefinition>\n)\n\nexport default Interpreter\n","import HoverDefinition from '../../HoverDefinition'\n\nconst BooleanDef = props => (\n  <HoverDefinition definition=\"JS is short for JavaScript, the coding language\" {...props}>\n    {props.children || 'JS'}\n  </HoverDefinition>\n)\n\nexport default BooleanDef\n","import HoverDefinition from '../../HoverDefinition'\n\nconst VariableDef = props => (\n  <HoverDefinition\n    definition=\"A variable holds any kind of data you want. They have a label and value.\"\n    {...props}\n  >\n    {props.children || 'variable'}\n  </HoverDefinition>\n)\n\nexport default VariableDef\n","import useTranslation from '../functions/useTranslation'\nimport { checkingExample, appTitle, balance, info } from '../styles/ShittyChecking.module.scss'\nimport { useState } from 'react'\n\nfunction ShittyChecking() {\n  const [opened, setOpened] = useState(false)\n  return (\n    <div className={checkingExample}>\n      <span className={appTitle}>{useTranslation('ðŸ’¸ Banking', { es: 'ðŸ’¸ Bancario' })}</span>\n      <span className={balance}>\n        {opened === true ? (\n          useTranslation('Balance: Unavailable', { es: 'Saldo: no disponible' })\n        ) : (\n          <button\n            onClick={() => {\n              setOpened(true)\n            }}\n          >\n            {useTranslation('View your Balance', { es: 'Ver su Saldo' })}\n          </button>\n        )}\n      </span>\n      <span className={info}>\n        {opened !== true\n          ? null\n          : useTranslation(\n              'Please close the app and wait for your next transaction notification.',\n              { es: 'Cierre la aplicaciÃ³n y espere la prÃ³xima notificaciÃ³n de transacciÃ³n.' }\n            )}\n      </span>\n    </div>\n  )\n}\n\nexport default ShittyChecking\n","// extracted by mini-css-extract-plugin\nexport var checkingExample = \"ShittyChecking-module--checkingExample--f1+bO\";\nexport var appTitle = \"ShittyChecking-module--appTitle--xIu5Y\";\nexport var balance = \"ShittyChecking-module--balance---cg03\";\nexport var info = \"ShittyChecking-module--info--KNkbV\";","// extracted by mini-css-extract-plugin\nexport var youtubeContainer = \"YTVideo-module--youtubeContainer--zCB2A\";\nexport var popout = \"YTVideo-module--popout--baHpn\";\nexport var disabled = \"YTVideo-module--disabled--HEa7g\";","import { youtubeContainer, disabled, popout } from '../styles/YTVideo.module.scss'\nimport { useState, Fragment } from 'react'\n\nconst urlRegex = /^[0-9A-Za-z_-]{10}[048AEIMQUYcgkosw]$/i\n\nfunction YTVideo(props = { url }) {\n  const [isOpen, setOpen] = useState(false)\n  const { url, query = {} } = props\n  if (\n    props.hasOwnProperty('query') &&\n    (typeof query != 'object' || query === null || Object.keys(query).length < 1)\n  )\n    throw new Error('Please provide a valid query object')\n  if (typeof url !== 'string') {\n    console.warn(new Error('Expected a video url'))\n    return null\n  }\n  query.autoplay = 1 // Currently autoplay is broken, it is always applied when the video loads, but the video only loads after you click the image and at the moment there's no way to skip clicking the image so we just enforce autoplay for the hot-swapped youtube embed\n  if (!urlRegex.test(url)) throw new Error('This url is invalid')\n  const videoURL =\n    'https://www.youtube.com/embed/' +\n    url +\n    `?` +\n    Object.entries(query)\n      .map(([key, value]) => `${key}=${encodeURIComponent(value)}`)\n      .join('&')\n  const parentProps = { ...props }\n  delete parentProps.url\n  delete parentProps.children\n  return (\n    <div\n      {...parentProps}\n      className={\n        youtubeContainer + ' youtube-container'\n        // 'youtube-container' + (typeof props.className == 'string' ? ' ' + props.className : '')\n      }>\n      {!isOpen ? (\n        <Fragment>\n          <img\n            onClick={() => setOpen(true)}\n            src={\n              props.hasOwnProperty('thumbnail')\n                ? props.thumbnail\n                : `https://img.youtube.com/vi/${url}/hqdefault.jpg`\n            }\n            alt=\"Youtube Video\"\n          />\n          <span>â–¶</span>\n        </Fragment>\n      ) : null}\n      <iframe\n        className={popout + (isOpen ? '' : ' ' + disabled)}\n        src={isOpen ? videoURL : null}\n        title=\"YouTube video player\"\n        frameBorder=\"0\"\n        sandbox=\"allow-scripts allow-same-origin\"\n        allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n        allowFullScreen\n      />\n    </div>\n  )\n}\n\nexport default YTVideo\n","import CodeSandbox from '../../components/CodeSandbox'\nimport Expression from '../../components/Dictionary/en/Expression'\nimport FunctionDef from '../../components/Dictionary/en/FunctionDef'\nimport Input from '../../components/Dictionary/en/Input'\nimport Interpreter from '../../components/Dictionary/en/Interpreter'\nimport JS from '../../components/Dictionary/en/JS'\nimport Output from '../../components/Dictionary/en/Output'\nimport Variable from '../../components/Dictionary/en/Variable'\nimport ShittyChecking from '../../components/ShittyChecking'\nimport Link from '../../components/TranslatedLink'\nimport YTVideo from '../../components/YTVideo'\nimport { Helmet } from 'react-helmet'\n\nexport default function EssentialTools() {\n  return (\n    <div>\n      <Helmet>\n        <title>ðŸ”¨ Essential Tools</title>\n        <meta\n          name=\"description\"\n          content=\"Learn essential coding tools to get started in JavaScript\"\n        />\n      </Helmet>\n      <h1>#3.2 ðŸ”¨ Essential Tools</h1>\n      <span className=\"introCard\">\n        <YTVideo url=\"himmatLe7aQ\" query={{ start: 32 }} thumbnail=\"/images/melinda-mae.jpg\" />\n        <span>How do you swallow a coding lesson? One byte at a time</span>\n      </span>\n\n      <p>\n        You probably have a lot of information in your head from the last section, try to do your\n        best to connect that information with the upcoming tasks. In this section we will be\n        learning some tools ðŸ”¨ to help us build logic models in JavaScript more effectively. Once\n        you finish this section you will know basic coding! If you feel overwhelmed consider taking\n        a break.\n        <br />\n        <br />\n        We will also be using terminal mode instead of the <Expression /> evaluator mode in our\n        editors, so you'll be seeing some things that say \"console.log(...)\", and our program output\n        will be whatever is inside the parenthesis (this is called a <FunctionDef />, there is more\n        on this below).\n      </p>\n      <div>\n        <h2>Variables</h2>\n        <p>\n          We can create <Variable>variables</Variable> in order to store (save) data values for\n          later use. In a basic logic model where we only have <Input>inputs</Input> and{' '}\n          <Output>outputs</Output>, so it becomes incredibly difficult to deal with data that\n          persists (needs to be saved). Let's say you're writing a checking account app, but you're\n          not allowed to save any data. The user might see a notification saying \"You just spent\n          $10.52\", and yet every time they open the app they're greeted with this:\n          <br />\n          <span className=\"bold\">(try using the app below)</span>\n        </p>\n\n        <ShittyChecking />\n\n        <p>\n          This would be so annoying! Instead of doing this we store <Variable>variables</Variable>{' '}\n          in our memory (or in this case the computer's memory) by giving them names, and then we\n          can retrieve or modify them later when we need them.\n          <br />\n          <br />\n          Here we name a <Variable /> called balance (note we do not give it any value yet so it\n          defaults to undefined)\n        </p>\n        <CodeSandbox className=\"mini\" value={'var balance\\nconsole.log(balance)'} consoleMode />\n        <p>\n          We can set a value by using the assignment operator \"=\" and putting the value we want\n          after it, and once we have done this we can see our <Variable /> has a value now :)\n        </p>\n        <CodeSandbox\n          className=\"mini\"\n          value={'var balance = 14.24\\nconsole.log(balance)'}\n          consoleMode\n        />\n      </div>\n      <div className=\"functions\">\n        <h2>Functions</h2>\n        <p>\n          <FunctionDef>Functions</FunctionDef> let you make re-usable pieces of code that serve as a\n          tool (like a blueprint of how to do something). <FunctionDef>Functions</FunctionDef> have\n          a name, a set of <Input>inputs</Input>, a code section, and an <Output>output</Output> (we\n          use \"return\" to specify the output). <FunctionDef>Functions</FunctionDef> can save you a\n          lot of time because you can re-use your function multiple times with different inputs,\n          rather than having to write that piece of code over and over.{' '}\n          <FunctionDef>Functions</FunctionDef> use parenthesis to create their inputs, and brackets\n          (they look like this {'{}'}). After we've created our <FunctionDef /> we use parenthesis\n          again to call it (calling a <FunctionDef /> means to run it) The \"console.log\" part of our\n          code is an example of a function (in this case to <Output /> some data). This{' '}\n          <FunctionDef /> doesn't have to be created by us because it's given to us automatically by\n          the <Interpreter>JS interpreter</Interpreter>. It's called (to call a <FunctionDef />{' '}\n          means to run it) with parenthesis and it can do different things depending on what the{' '}\n          <Input /> we put inside it is (which in the previous example was the balance{' '}\n          <Variable>variable's</Variable> current value).\n        </p>\n        <h2>Addition Function</h2>\n        <p>\n          While this <FunctionDef /> is mostly redundant, you could easily make a <FunctionDef /> to\n          add two numbers together.\n        </p>\n        <CodeSandbox\n          consoleMode\n          value={'function add(a, b){\\n    return a + b\\n}'}\n          className=\"short\"\n        />\n        <p>\n          The <Output /> is empty because we didn't log anything to the console.\n        </p>\n      </div>\n      <div className=\"console\">\n        <h2>More about the Console</h2>\n        On the previous page I was using the \"JavaScript Expression Evaluator\". On the right you\n        would see what <Output /> of the <Interpreter>JS interpreter</Interpreter> evaluating the\n        code on the left side. Normally when we're coding we are running our code from a terminal,\n        and we see the <Output /> of the console.log <FunctionDef /> in real-time instead of seeing\n        the <Output /> of the <JS /> code evaluation. We only need to <Output /> values using\n        console.log when we as the developer (or coder) want to know what those values are, that way\n        our program's <Output /> doesn't get super cluttered.\n      </div>\n      <CodeSandbox\n        consoleMode\n        value={'function add(a, b){\\n    return a + b\\n}\\nconsole.log(add(14, 16))'}\n        className=\"short\"\n      />\n      <div className=\"parenthesis\">\n        <h2>Parenthesis</h2>\n        Not only can you use parenthesis to change the ordering of math{' '}\n        <Expression>expressions</Expression>, but you can also use parenthesis to change the\n        ordering of any other kind of <Expression />. Here are some example of changing the order of\n        code evaluation using parenthesis for math and non-math purposes.\n        <br />\n        <br />\n        <h3>Math Without Parenthesis</h3>\n        <CodeSandbox consoleMode value=\"console.log(10 * 3 + 4)\" className=\"mini\" />\n        <h3>Math With Parenthesis</h3>\n        <CodeSandbox consoleMode value=\"console.log(10 * (3 + 4))\" className=\"mini\" />\n        <h3>Boolean logic without Parenthesis</h3>\n        <CodeSandbox consoleMode value=\"console.log(false && true || true)\" className=\"mini\" />\n        <h3>Boolean logic with Parenthesis</h3>\n        <CodeSandbox consoleMode value=\"console.log(false && (true || true))\" className=\"mini\" />\n      </div>\n      <br />\n      <Link className=\"next\" to=\"/rpg\">\n        Next: #4.0 Building your Text RPG\n      </Link>\n    </div>\n  )\n}\n"],"names":["props","definition","children","useState","opened","setOpened","className","useTranslation","es","onClick","urlRegex","url","isOpen","setOpen","query","hasOwnProperty","Object","keys","length","Error","console","warn","autoplay","test","videoURL","entries","map","key","value","encodeURIComponent","join","parentProps","youtubeContainer","Fragment","src","thumbnail","alt","title","frameBorder","sandbox","allow","allowFullScreen","EssentialTools","name","content","start","consoleMode","to"],"sourceRoot":""}