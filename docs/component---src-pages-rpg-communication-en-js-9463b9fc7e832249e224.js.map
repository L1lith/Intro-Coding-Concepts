{"version":3,"file":"component---src-pages-rpg-communication-en-js-9463b9fc7e832249e224.js","mappings":"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","sources":["webpack://your-first-rpg/./src/components/Dictionary/en/BooleanDef.js","webpack://your-first-rpg/./src/components/Dictionary/en/Expression.js","webpack://your-first-rpg/./src/components/Dictionary/en/FunctionDef.js","webpack://your-first-rpg/./src/components/Dictionary/en/RPG.js","webpack://your-first-rpg/./src/components/Dictionary/en/StringDef.js","webpack://your-first-rpg/./src/components/Dictionary/en/Variable.js","webpack://your-first-rpg/./src/styles/YTVideo.module.scss","webpack://your-first-rpg/./src/components/YTVideo.js","webpack://your-first-rpg/./src/components/Dictionary/en/Scope.js","webpack://your-first-rpg/./src/pages/rpg/communication.en.js","webpack://your-first-rpg/./src/styles/rpg/communication.module.scss"],"sourcesContent":["import HoverDefinition from '../../HoverDefinition'\n\nconst BooleanDef = props => (\n  <HoverDefinition\n    definition=\"A boolean is something that is either true or false, like a yes or no question\"\n    {...props}>\n    {props.children || 'boolean'}\n  </HoverDefinition>\n)\n\nexport default BooleanDef\n","import HoverDefinition from '../../HoverDefinition'\n\nconst Expression = props => (\n  <HoverDefinition\n    definition=\"An expression is a piece of code that can be reduced to a single value, like a math equation\"\n    {...props}>\n    {props.children || 'expression'}\n  </HoverDefinition>\n)\n\nexport default Expression\n","import HoverDefinition from '../../HoverDefinition'\n\nconst FunctionDef = props => (\n  <HoverDefinition\n    definition=\"A function is a re-usable piece of code with it's own set of inputs, rules, and outputs. It's like a miniature logic model that saves us time!\"\n    {...props}>\n    {props.children || 'function'}\n  </HoverDefinition>\n)\n\nexport default FunctionDef\n","import HoverDefinition from '../../HoverDefinition'\n\nconst RPG = props => (\n  <HoverDefinition\n    definition=\"RPG stand for Role Playing Game, which is a kind of adventure game\"\n    {...props}>\n    {props.children || 'RPG'}\n  </HoverDefinition>\n)\n\nexport default RPG\n","import HoverDefinition from '../../HoverDefinition'\n\nconst StringDef = props => (\n  <HoverDefinition\n    definition=\"A string is a piece of human text your computer knows isn't code, but it can still be used in your code\"\n    {...props}>\n    {props.children || 'string'}\n  </HoverDefinition>\n)\n\nexport default StringDef\n","import HoverDefinition from '../../HoverDefinition'\n\nconst VariableDef = props => (\n  <HoverDefinition\n    definition=\"A variable holds any kind of data you want. They have a label and value.\"\n    {...props}>\n    {props.children || 'variable'}\n  </HoverDefinition>\n)\n\nexport default VariableDef\n","// extracted by mini-css-extract-plugin\nexport var youtubeContainer = \"YTVideo-module--youtubeContainer--zCB2A\";\nexport var disabled = \"YTVideo-module--disabled--HEa7g\";","import { youtubeContainer, disabled } from '../styles/YTVideo.module.scss'\nimport { useState, Fragment } from 'react'\n\nconst urlRegex = /^[0-9A-Za-z_-]{10}[048AEIMQUYcgkosw]$/i\n\nfunction YTVideo(props = { url }) {\n  const [isOpen, setOpen] = useState(false)\n  const { url, query = {} } = props\n  if (\n    props.hasOwnProperty('query') &&\n    (typeof query != 'object' || query === null || Object.keys(query).length < 1)\n  )\n    throw new Error('Please provide a valid query object')\n  if (typeof url !== 'string') {\n    console.warn(new Error('Expected a video url'))\n    return null\n  }\n  query.autoplay = 1 // Currently autoplay is broken, it is always applied when the video loads, but the video only loads after you click the image and at the moment there's no way to skip clicking the image so we just enforce autoplay for the hot-swapped youtube embed\n  if (!urlRegex.test(url)) throw new Error('This url is invalid')\n  const videoURL =\n    'https://www.youtube.com/embed/' +\n    url +\n    `?` +\n    Object.entries(query)\n      .map(([key, value]) => `${key}=${encodeURIComponent(value)}`)\n      .join('&')\n  const parentProps = { ...props }\n  delete parentProps.url\n  delete parentProps.children\n  return (\n    <div\n      {...parentProps}\n      className={\n        youtubeContainer + ' youtube-container'\n        // 'youtube-container' + (typeof props.className == 'string' ? ' ' + props.className : '')\n      }\n    >\n      {!isOpen ? (\n        <Fragment>\n          <img\n            onClick={() => setOpen(true)}\n            src={\n              props.hasOwnProperty('thumbnail')\n                ? props.thumbnail\n                : `https://img.youtube.com/vi/${url}/hqdefault.jpg`\n            }\n            alt=\"Youtube Video\"\n          />\n          <span>‚ñ∂</span>\n        </Fragment>\n      ) : null}\n      <iframe\n        className={isOpen ? null : disabled}\n        src={isOpen ? videoURL : null}\n        title=\"YouTube video player\"\n        frameBorder=\"0\"\n        sandbox=\"allow-scripts allow-same-origin\"\n        allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n        allowFullScreen\n      />\n    </div>\n  )\n}\n\nexport default YTVideo\n","import HoverDefinition from '../../HoverDefinition'\n\nconst Scope = props => (\n  <HoverDefinition\n    definition=\"The scope is the size of the features and tasks in a project\"\n    {...props}>\n    {props.children || 'scope'}\n  </HoverDefinition>\n)\n\nexport default Scope\n","import CodeSandbox from '../../components/CodeSandbox'\nimport BooleanDef from '../../components/Dictionary/en/BooleanDef'\nimport Expression from '../../components/Dictionary/en/Expression'\nimport FunctionDef from '../../components/Dictionary/en/FunctionDef'\nimport RPG from '../../components/Dictionary/en/RPG'\nimport Scope from '../../components/Dictionary/en/Scope'\nimport StringDef from '../../components/Dictionary/en/StringDef'\nimport Variable from '../../components/Dictionary/en/Variable'\nimport Link from '../../components/TranslatedLink'\nimport YTVideo from '../../components/YTVideo'\nimport { play } from '../../styles/rpg/communication.module.scss'\nimport { Helmet } from 'react-helmet'\n\nexport default function Communication() {\n  return (\n    <div className=\"communication\">\n      <Helmet>\n        <title>üó£Ô∏è Talking to the Player</title>\n      </Helmet>\n      <h2>#4.1 üó£Ô∏è Talking to the Player</h2>\n      <span className=\"introCard\">\n        <YTVideo url=\"7yeA7a0uS3A\" query={{ start: 29 }} thumbnail=\"/images/heman-title.jpg\" />\n        Half-dragon half-tiger sold separately\n      </span>\n      <p>\n        Now that we've laid out the basics, let's apply ourselves and have some fun üòä Before you\n        build your <RPG /> we first must learn how to get input and send messages to the player.\n        There's no use in coding an adventure if there's no way to interact with it.\n      </p>\n      <div className=\"comments\">\n        <h2>Comments</h2>\n        <p>\n          Comments allow us to write things in our code that is purely for notation (like writing\n          notes in your math). Anything in the same line that comes after \"//\" will not be used\n          while your code is running.\n          <br />\n          <br />\n          We can use comments for things like add a TODO message so you can come back to add\n          something later, or we can use it to help explain how our code works.\n        </p>\n        <CodeSandbox\n          value={\"console.log(4 + 6)\\n// This part doesn't have to be valid JavaScript code\"}\n          consoleMode\n          disableAutoRun\n          className=\"mini\"\n        />\n      </div>\n      <div className=\"js-io\">\n        <h2>Input/Output for Communicating with the Player</h2>\n        <p>\n          While modifying the content of a webpage (done via HTML) is outside of the <Scope /> of\n          this project, we can still communicate with the player from inside JavaScript! We can do\n          this using the prompt and alert functions. From now on if you wish to run the code in the\n          editors{' '}\n          <span className=\"bold\">\n            you must press the <span className={play}>‚ñ∂</span> button\n          </span>{' '}\n          first. Try running the examples below:\n        </p>\n        <h3>Output: Alert</h3>\n        <CodeSandbox\n          value=\"alert('Your princess is in another castle')\"\n          consoleMode\n          disableAutoRun\n          className=\"mini\"\n        />\n        <h3>Input: Prompt</h3>\n        <p>\n          We can ask a user for input and save it to a <Variable /> to use it later\n        </p>\n        <CodeSandbox\n          value={\n            \"var user = prompt('What is your name?')\\nalert('Wishing ' + user + ' good fortune üí∞')\"\n          }\n          consoleMode\n          disableAutoRun\n          className=\"mini\"\n        />\n        <p>\n          Note: In normal web development the use of the alert and prompt functions is discouraged.\n          This is because creating dialogue inside of the page (using HTML) rather than inside of\n          the browsers pop-up boxes is less jarring.\n        </p>\n      </div>\n      <div className=\"flow-control\">\n        <h2>Flow Control</h2>\n        <p>\n          Flow control allows us to establish branching choices in our logic model using{' '}\n          <BooleanDef /> logic. You might say something along the lines of \"if x is true then do y,\n          or else do z\". It allows us to create flexible code that chooses the appropriate path to\n          take in order to properly complete the task. You can read more about flow control{' '}\n          <a target=\"_blank\" href=\"https://exploringjs.com/impatient-js/ch_control-flow.html\">\n            here.\n          </a>\n        </p>\n        <h3>if/else</h3>\n        <p>\n          You can use combinations of if and else to make powerful decision making models using{' '}\n          <Expression>expressions</Expression> that return <BooleanDef>booleans</BooleanDef> to ask\n          yes or no questions. Here we have an example of doing something based on the user's input\n        </p>\n        <CodeSandbox\n          value={\n            '// Notice that any spaces or uppercases will cause the equality to fail, so \"YES\" will give the wrong result\\nif(prompt(\"Do you like oatmeal raisin cookies?\") === \"yes\") { \\n    alert(\"You have good taste in üç™\")\\n} else { // They entered anything besides exactly \"yes\"\\n    alert(\"Maybe üç™ just aren\\'t your thing?\")\\n}'\n          }\n          consoleMode\n          disableAutoRun\n          className=\"short\"\n        />\n        <p>We can also chain multiple ifs together to have multiple outcomes</p>\n\n        <CodeSandbox\n          value={\n            'var favoriteCookie = prompt(\"What\\'s your favorite kind of cookie?\")\\nif(favoriteCookie === \"oatmeal\" || favoriteCookie === \"oatmeal raisin\") { \\n    alert(\"You have good taste in üç™\")\\n} else if (favoriteCookie === \"chocolate chip\") {\\n    alert(\"Chocolate chip is the second best cookie so that\\'s understandable\")\\n} else {\\n    alert(\"Maybe üç™ just aren\\'t your thing?\")\\n}'\n          }\n          consoleMode\n          disableAutoRun\n          className=\"short\"\n        />\n        <h3>while</h3>\n        <p>\n          You can use the while loop to keep doing something until the <BooleanDef /> <Expression />{' '}\n          returns false. Look here how we can repeatedly ask the user for their name until they\n          return a valid name (if a name is missing it is invalid, if the user exits the prompt the\n          prompt it returns null so we must retry).\n        </p>\n        <CodeSandbox\n          disableAutoRun\n          consoleMode\n          value={\n            'var name\\nwhile(!name) {\\n    name = prompt(\"What is your name adventurer?\")\\n}\\nalert(\"You wake up on a strange beach. \\'\" + name + \"\\' is written on the inside of your shirt.\")'\n          }\n          className=\"short\"\n        />\n      </div>\n      <div>\n        <h2>Better text Handling</h2>\n        <p>\n          I've created this <FunctionDef /> to help you ensure you receive valid input. Strings\n          provide .trim(...) <FunctionDef /> to remove all spaces from the beginning and end. Here\n          we check that the trimmed string is at least 1 character long (meaning that there's at\n          least 1 non-space character). Then we return the trimmed string as we probably don't care\n          about the spaces and it can make it harder to match strings later (for example \"yes \" ===\n          \"yes\" will return false, but if we trim the text we don't have this problem)\n        </p>\n        <CodeSandbox\n          disableAutoRun\n          consoleMode\n          value={`function smartPrompt(question) {\n    var output = null\n    // While will keep running the code inside it over and over until the expression evaluates to false\n    while(output === null || output.trim().length < 1) { \n        output = prompt(question)\n    }\n    return output.trim()\n}\n\nvar name = smartPrompt(\"What is your name adventurer?\")\n\nalert(\"You wake up on a strange beach. '\" + name + \"' is written on the inside of your shirt.\")`}\n        />\n        <p>\n          Here we combine the .toLowerCase <FunctionDef /> (you can use it to make any <StringDef />{' '}\n          lowercase) and our smartPrompt <FunctionDef />. Notice how when we run it it still\n          recognizes a yes input even if it has whitespace around it or isn't lowercase.\n        </p>\n        <CodeSandbox\n          value={`function smartPrompt(question) {\n    var output = null\n    while(output === null || output.trim().length < 1) {\n        output = prompt(question)\n    }\n    return output.trim()\n}\n// Now it accepts \"  yes  \", \"YES\", \"  yEs   \", etc\nif(smartPrompt(\"Do you like oatmeal raisin cookies?\").toLowerCase() === \"yes\") { \\n    alert(\"You have good taste in üç™\")\\n} else {\\n    alert(\"Maybe üç™ just aren\\'t your thing?\")\\n}`}\n          consoleMode\n          disableAutoRun\n        />\n      </div>\n      <Link className=\"next\" to=\"/rpg/publishing\">\n        Next: #4.2 üèÜ Sharing your RPG\n      </Link>\n    </div>\n  )\n}\n","// extracted by mini-css-extract-plugin\nexport var play = \"communication-module--play--RhN+L\";"],"names":["props","definition","children","urlRegex","url","useState","isOpen","setOpen","query","hasOwnProperty","Object","keys","length","Error","console","warn","autoplay","test","videoURL","entries","map","key","value","encodeURIComponent","join","parentProps","className","youtubeContainer","Fragment","onClick","src","thumbnail","alt","title","frameBorder","sandbox","allow","allowFullScreen","HoverDefinition","Communication","Helmet","YTVideo","start","RPG","CodeSandbox","consoleMode","disableAutoRun","play","Variable","BooleanDef","target","href","Expression","FunctionDef","StringDef","to"],"sourceRoot":""}