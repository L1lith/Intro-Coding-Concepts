{"version":3,"file":"component---src-pages-coding-primitives-en-js-ed067ceee96e65a62ced.js","mappings":"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","sources":["webpack://your-first-rpg/./src/components/Dictionary/en/BooleanDef.js","webpack://your-first-rpg/./src/components/Dictionary/en/Expression.js","webpack://your-first-rpg/./src/components/Dictionary/en/Input.js","webpack://your-first-rpg/./src/components/Dictionary/en/Interpreter.js","webpack://your-first-rpg/./src/components/Dictionary/en/JS.js","webpack://your-first-rpg/./src/components/Dictionary/en/Operator.js","webpack://your-first-rpg/./src/components/Dictionary/en/StringDef.js","webpack://your-first-rpg/./src/components/Dictionary/en/Variable.js","webpack://your-first-rpg/./src/styles/YTVideo.module.scss","webpack://your-first-rpg/./src/components/YTVideo.js","webpack://your-first-rpg/./src/pages/coding/primitives.en.js","webpack://your-first-rpg/./src/styles/coding/primitives.module.scss"],"sourcesContent":["import HoverDefinition from '../../HoverDefinition'\n\nconst BooleanDef = props => (\n  <HoverDefinition\n    definition=\"A boolean is something that is either true or false, like a yes or no question\"\n    {...props}\n  >\n    {props.children || 'boolean'}\n  </HoverDefinition>\n)\n\nexport default BooleanDef\n","import HoverDefinition from '../../HoverDefinition'\n\nconst Expression = props => (\n  <HoverDefinition\n    definition=\"An expression is a piece of code that can be reduced to a single value, like a math equation\"\n    {...props}\n  >\n    {props.children || 'expression'}\n  </HoverDefinition>\n)\n\nexport default Expression\n","import HoverDefinition from '../../HoverDefinition'\n\nconst Input = props => (\n  <HoverDefinition definition=\"Your input is data that goes into your logic model\" {...props}>\n    {props.children || 'input'}\n  </HoverDefinition>\n)\n\nexport default Input\n","import HoverDefinition from '../../HoverDefinition'\n\nconst Interpreter = props => (\n  <HoverDefinition\n    definition=\"The JavaScript interpreter is the software that runs your code, like the engine\"\n    {...props}\n  >\n    {props.children || 'interpreter'}\n  </HoverDefinition>\n)\n\nexport default Interpreter\n","import HoverDefinition from '../../HoverDefinition'\n\nconst BooleanDef = props => (\n  <HoverDefinition definition=\"JS is short for JavaScript, the coding language\" {...props}>\n    {props.children || 'JS'}\n  </HoverDefinition>\n)\n\nexport default BooleanDef\n","import HoverDefinition from '../../HoverDefinition'\n\nconst Operator = props => (\n  <HoverDefinition\n    definition=\"An operator is an action in coding that inputs and outputs data, like comparing two booleans, or adding two numbers\"\n    {...props}\n  >\n    {props.children || 'operator'}\n  </HoverDefinition>\n)\n\nexport default Operator\n","import HoverDefinition from '../../HoverDefinition'\n\nconst StringDef = props => (\n  <HoverDefinition\n    definition=\"A string is a piece of human text your computer knows isn't code, but it can still be used in your code\"\n    {...props}\n  >\n    {props.children || 'string'}\n  </HoverDefinition>\n)\n\nexport default StringDef\n","import HoverDefinition from '../../HoverDefinition'\n\nconst VariableDef = props => (\n  <HoverDefinition\n    definition=\"A variable holds any kind of data you want. They have a label and value.\"\n    {...props}\n  >\n    {props.children || 'variable'}\n  </HoverDefinition>\n)\n\nexport default VariableDef\n","// extracted by mini-css-extract-plugin\nexport var youtubeContainer = \"YTVideo-module--youtubeContainer--zCB2A\";\nexport var disabled = \"YTVideo-module--disabled--HEa7g\";","import { youtubeContainer, disabled } from '../styles/YTVideo.module.scss'\nimport { useState, Fragment } from 'react'\n\nconst urlRegex = /^[0-9A-Za-z_-]{10}[048AEIMQUYcgkosw]$/i\n\nfunction YTVideo(props = { url }) {\n  const [isOpen, setOpen] = useState(false)\n  const { url, query = {} } = props\n  if (\n    props.hasOwnProperty('query') &&\n    (typeof query != 'object' || query === null || Object.keys(query).length < 1)\n  )\n    throw new Error('Please provide a valid query object')\n  if (typeof url !== 'string') {\n    console.warn(new Error('Expected a video url'))\n    return null\n  }\n  query.autoplay = 1 // Currently autoplay is broken, it is always applied when the video loads, but the video only loads after you click the image and at the moment there's no way to skip clicking the image so we just enforce autoplay for the hot-swapped youtube embed\n  if (!urlRegex.test(url)) throw new Error('This url is invalid')\n  const videoURL =\n    'https://www.youtube.com/embed/' +\n    url +\n    `?` +\n    Object.entries(query)\n      .map(([key, value]) => `${key}=${encodeURIComponent(value)}`)\n      .join('&')\n  const parentProps = { ...props }\n  delete parentProps.url\n  delete parentProps.children\n  return (\n    <div\n      {...parentProps}\n      className={\n        youtubeContainer + ' youtube-container'\n        // 'youtube-container' + (typeof props.className == 'string' ? ' ' + props.className : '')\n      }\n    >\n      {!isOpen ? (\n        <Fragment>\n          <img\n            onClick={() => setOpen(true)}\n            src={\n              props.hasOwnProperty('thumbnail')\n                ? props.thumbnail\n                : `https://img.youtube.com/vi/${url}/hqdefault.jpg`\n            }\n            alt=\"Youtube Video\"\n          />\n          <span>â–¶</span>\n        </Fragment>\n      ) : null}\n      <iframe\n        className={isOpen ? null : disabled}\n        src={isOpen ? videoURL : null}\n        title=\"YouTube video player\"\n        frameBorder=\"0\"\n        sandbox=\"allow-scripts allow-same-origin\"\n        allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n        allowFullScreen\n      />\n    </div>\n  )\n}\n\nexport default YTVideo\n","import CodeSandbox from '../../components/CodeSandbox'\nimport BooleanDef from '../../components/Dictionary/en/BooleanDef'\nimport Expression from '../../components/Dictionary/en/Expression'\nimport Input from '../../components/Dictionary/en/Input'\nimport Interpreter from '../../components/Dictionary/en/Interpreter'\nimport JS from '../../components/Dictionary/en/JS'\nimport Operator from '../../components/Dictionary/en/Operator'\nimport Output from '../../components/Dictionary/en/Output'\nimport StringDef from '../../components/Dictionary/en/StringDef'\nimport Variable from '../../components/Dictionary/en/Variable'\nimport Link from '../../components/TranslatedLink'\nimport YTVideo from '../../components/YTVideo'\nimport { primitives, primitivesList } from '../../styles/coding/primitives.module.scss'\nimport { Helmet } from 'react-helmet'\n\nconst Primitives = () => (\n  <div className={primitives}>\n    <Helmet>\n      <title>ðŸ“Š Data Types</title>\n      <meta name=\"description\" content=\"Learn about the different types of data in JavaScript\" />\n    </Helmet>\n    <h2>#3.1 ðŸ“Š Basic Data Types</h2>\n    <br />\n    <span className=\"introCard\">\n      <YTVideo url=\"_4TPlwwHM8Q\" thumbnail=\"/images/blender-horror.jpg\" />\n      <span>\n        You can read more{' '}\n        <a target=\"_blank\" href=\"https://www.aleksandrhovhannisyan.com/blog/binary-for-beginners/\">\n          here\n        </a>{' '}\n        if you'd like a more in-depth explanation about how binary values are converted into more\n        complex data types.\n      </span>\n    </span>\n    <br />\n    <p>\n      In this section we will upgrade from working with just <BooleanDef /> logic to writing working\n      JavaScript! Primitives are the basic kinds of data in JavaScript. Here are the basic\n      primitives:\n    </p>\n    <ul className={primitivesList}>\n      <li>\n        <BooleanDef>Boolean</BooleanDef>\n      </li>\n      <li>Number</li>\n      <li>\n        <StringDef>String</StringDef>\n      </li>\n      <li>undefined</li>\n      <li>null</li>\n    </ul>\n    <p>\n      I will now detail each type of data and their <Operator>operators</Operator>, then in the next\n      page I will provide more examples of how they can be used together. Additionally, you can edit\n      the <Input /> of all the code examples below. If your syntax is invalid (this means your\n      coding grammar is incorrect) you will receive an error instead the <Output /> you expected\n      because the <Interpreter>JS interpreter</Interpreter> will become confused.\n      <br />\n      <br />\n      The left side of the editor is the code we give to the <Interpreter />, and the right side is\n      the output it gives us. We are currently in the \"<Expression>Expression</Expression>{' '}\n      Evaluator\" mode, meaning that it will take whatever our code is on the left side and reduce it\n      to a single value on the right side.\n    </p>\n    <div className=\"type boolean\">\n      <h2>Booleans</h2>\n      <p>\n        JavaScript has built in support for <BooleanDef>booleans</BooleanDef>.\n      </p>\n      <CodeSandbox value=\"true\" className=\"mini\" />\n      <CodeSandbox value=\"false\" className=\"mini\" />\n      <h3>Or Operations</h3>\n      <p>\n        The or <Operator /> is written as \"||\" in JavaScript, and it is used to compare two{' '}\n        <BooleanDef>booleans</BooleanDef>. It returns true if either of the{' '}\n        <BooleanDef>booleans</BooleanDef> beside it are true, otherwise it returns false.\n      </p>\n      <CodeSandbox value=\"true || false\" className=\"mini\" />\n      <CodeSandbox value=\"false || true\" className=\"mini\" />\n      <CodeSandbox value=\"false || false\" className=\"mini\" />\n      <h3>Not Operations</h3>\n      <p>\n        The not <Operator /> is written as \"!\" in JavaScript, and it returns the opposite.\n      </p>\n      <CodeSandbox value=\"!true\" className=\"mini\" />\n      <CodeSandbox value=\"!false\" className=\"mini\" />\n      <h3>And Operations</h3>\n      <p>\n        The and <Operator /> is written as \"&&\" in JavaScript. It returns true if both of the{' '}\n        <BooleanDef>booleans</BooleanDef> next to it are true, otherwise it returns false.\n      </p>\n      <CodeSandbox value=\"true && true\" className=\"mini\" />\n      <CodeSandbox value=\"true && false\" className=\"mini\" />\n      <CodeSandbox value=\"false && false\" className=\"mini\" />\n    </div>\n    <div className=\"type numbers\">\n      <h2>Numbers</h2>\n      <p>\n        Numbers can be integers (whole numbers like 33) or floats (meaning decimals like 45.512).\n        Some basic operations are adding, multiplication, division, and subtraction. Besides\n        changing the numbers you can also compare them (using symbols like &gt;, &lt;, or â‰¥) in\n        order to <Output /> <BooleanDef /> values.\n      </p>\n      <h3>Addition/Subtraction</h3>\n      <CodeSandbox value=\"12 + 12\" className=\"mini\" />\n      <CodeSandbox value=\"30 - 12\" className=\"mini\" />\n      <h3>Greater than/Less than</h3>\n      <p>\n        The greater than and less than <Operator>operators</Operator> return <BooleanDef /> values.\n      </p>\n      <CodeSandbox value=\"12 > 10\" className=\"mini\" />\n      <CodeSandbox value=\"12 < 10\" className=\"mini\" />\n      <CodeSandbox value=\"5 >= 5\" className=\"mini\" />\n      <CodeSandbox value=\"6 <= 5\" className=\"mini\" />\n      <h3>Multiply/Divide</h3>\n      <CodeSandbox value=\"32 * 11\" className=\"mini\" />\n      <CodeSandbox value=\"4 / 12\" className=\"mini\" />\n    </div>\n    <div className=\"type strings\">\n      <h2>Strings</h2>\n      <p>\n        <StringDef>Strings</StringDef> are collections of text (like someones name, an address,\n        etc). They are written by surrounding the text in single or double quotes.\n      </p>\n      <CodeSandbox value={'\"I like chocolate milk\"'} className=\"mini\" />\n      <CodeSandbox value={\"'What does the fox say?'\"} className=\"mini\" />\n      <p>\n        They can also be added together (they are simply squished together, not added like numbers)\n      </p>\n      <CodeSandbox value={\"'beep' + 'bop'\"} className=\"mini\" />\n      <CodeSandbox value={\"'9' + '10'\"} className=\"mini\" />\n    </div>\n    <div className=\"type undefined\">\n      <h2>undefined</h2>\n      <p>\n        The value undefined is used to represent a value that has not been assigned anything else.\n        It's basically the universal placeholder value. Undefined is the value given to{' '}\n        <Variable>variables</Variable> if we don't given them a value ourselves.\n      </p>\n      <CodeSandbox value=\"undefined\" className=\"mini\" />\n    </div>\n    <div className=\"type null\">\n      <h2>null</h2>\n      <p>\n        The value null is used to represent the value \"nothing\". It's different from undefined\n        because it means the coder intentionally made it nothing rather than it just being a missing\n        value.\n      </p>\n      <CodeSandbox value=\"null\" className=\"mini\" />\n    </div>\n    <div className=\"equality\">\n      <h2>Equality</h2>\n      <p>\n        To check whether two values are exactly the same we can use the strict equality{' ' + ''}\n        <Operator />\n        {' ' + ''}\n        \"===\"\n      </p>\n      <CodeSandbox value=\"1 === 1\" className=\"mini\" />\n      <CodeSandbox value={'1 === \"1\"'} className=\"mini\" />\n      <CodeSandbox value={'1 === 1.1'} className=\"mini\" />\n    </div>\n    <br />\n    <p>\n      In the next section we'll be using these primitive values so you can see a little bit more why\n      they are useful. You can read in greater detail about <JS>JS's</JS> data types{' '}\n      <a target=\"_blank\" href=\"https://javascript.info/types\">\n        here\n      </a>\n    </p>\n    <Link className=\"next\" to=\"/coding/essential-tools\">\n      Next: #3.2 Essential Tools\n    </Link>\n  </div>\n)\n\nexport default Primitives\n","// extracted by mini-css-extract-plugin\nexport var primitives = \"primitives-module--primitives--i5iJX\";\nexport var primitivesList = \"primitives-module--primitivesList--+RJSn\";"],"names":["props","definition","children","urlRegex","url","useState","isOpen","setOpen","query","hasOwnProperty","Object","keys","length","Error","console","warn","autoplay","test","videoURL","entries","map","key","value","encodeURIComponent","join","parentProps","className","youtubeContainer","Fragment","onClick","src","thumbnail","alt","title","frameBorder","sandbox","allow","allowFullScreen","primitives","name","content","target","href","primitivesList","to"],"sourceRoot":""}