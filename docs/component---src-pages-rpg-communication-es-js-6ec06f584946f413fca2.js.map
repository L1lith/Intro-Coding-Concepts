{"version":3,"file":"component---src-pages-rpg-communication-es-js-6ec06f584946f413fca2.js","mappings":"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","sources":["webpack://your-first-rpg/./src/components/Dictionary/es/BooleanDef.js","webpack://your-first-rpg/./src/components/Dictionary/es/Expression.js","webpack://your-first-rpg/./src/components/Dictionary/es/FunctionDef.js","webpack://your-first-rpg/./src/components/Dictionary/es/RPG.js","webpack://your-first-rpg/./src/components/Dictionary/es/StringDef.js","webpack://your-first-rpg/./src/components/Dictionary/es/Variable.js","webpack://your-first-rpg/./src/styles/YTVideo.module.scss","webpack://your-first-rpg/./src/components/YTVideo.js","webpack://your-first-rpg/./src/components/Dictionary/es/Scope.js","webpack://your-first-rpg/./src/pages/rpg/communication.es.js","webpack://your-first-rpg/./src/styles/rpg/communication.module.scss"],"sourcesContent":["import HoverDefinition from '../../HoverDefinition'\n\nconst BooleanDef = props => (\n  <HoverDefinition\n    definition={`Un \"boolean\" es algo que es verdadero o falso, como una pregunta de s√≠ o no.`}\n    {...props}\n  >\n    {props.children || 'boolean'}\n  </HoverDefinition>\n)\n\nexport default BooleanDef\n","import HoverDefinition from '../../HoverDefinition'\n\nconst Expression = props => (\n  <HoverDefinition\n    definition={`Una \"expression\" es un fragmento de c√≥digo que se puede reducir a un solo valor, como una ecuaci√≥n matem√°tica`}\n    {...props}\n  >\n    {props.children || 'expression'}\n  </HoverDefinition>\n)\n\nexport default Expression\n","import HoverDefinition from '../../HoverDefinition'\n\nconst FunctionDef = props => (\n  <HoverDefinition\n    definition={`Una \"function\" es un fragmento de c√≥digo reutilizable con su propio conjunto de entradas, reglas y salidas. ¬°Es como un modelo l√≥gico en miniatura que nos ahorra tiempo!`}\n    {...props}\n  >\n    {props.children || 'function'}\n  </HoverDefinition>\n)\n\nexport default FunctionDef\n","import HoverDefinition from '../../HoverDefinition'\n\nconst RPG = props => (\n  <HoverDefinition\n    definition={`\"RPG\" significa Role Playing Game, que es una especie de juego de aventuras.`}\n    {...props}\n  >\n    {props.children || 'RPG'}\n  </HoverDefinition>\n)\n\nexport default RPG\n","import HoverDefinition from '../../HoverDefinition'\n\nconst StringDef = props => (\n  <HoverDefinition\n    definition={`Una \"cadena\" es un fragmento de texto humano que su computadora sabe que no es c√≥digo, pero a√∫n puede usarse en su c√≥digo`}\n    {...props}\n  >\n    {props.children || 'string'}\n  </HoverDefinition>\n)\n\nexport default StringDef\n","import HoverDefinition from '../../HoverDefinition'\n\nconst VariableDef = props => (\n  <HoverDefinition\n    definition={`Una \"variable\" contiene cualquier tipo de datos que desee. Tienen etiqueta y valor.`}\n    {...props}\n  >\n    {props.children || 'variable'}\n  </HoverDefinition>\n)\n\nexport default VariableDef\n","// extracted by mini-css-extract-plugin\nexport var youtubeContainer = \"YTVideo-module--youtubeContainer--zCB2A\";\nexport var popout = \"YTVideo-module--popout--baHpn\";\nexport var disabled = \"YTVideo-module--disabled--HEa7g\";","import { youtubeContainer, disabled, popout } from '../styles/YTVideo.module.scss'\nimport { useState, Fragment } from 'react'\n\nconst urlRegex = /^[0-9A-Za-z_-]{10}[048AEIMQUYcgkosw]$/i\n\nfunction YTVideo(props = { url }) {\n  const [isOpen, setOpen] = useState(false)\n  const { url, query = {} } = props\n  if (\n    props.hasOwnProperty('query') &&\n    (typeof query != 'object' || query === null || Object.keys(query).length < 1)\n  )\n    throw new Error('Please provide a valid query object')\n  if (typeof url !== 'string') {\n    console.warn(new Error('Expected a video url'))\n    return null\n  }\n  query.autoplay = 1 // Currently autoplay is broken, it is always applied when the video loads, but the video only loads after you click the image and at the moment there's no way to skip clicking the image so we just enforce autoplay for the hot-swapped youtube embed\n  if (!urlRegex.test(url)) throw new Error('This url is invalid')\n  const videoURL =\n    'https://www.youtube.com/embed/' +\n    url +\n    `?` +\n    Object.entries(query)\n      .map(([key, value]) => `${key}=${encodeURIComponent(value)}`)\n      .join('&')\n  const parentProps = { ...props }\n  delete parentProps.url\n  delete parentProps.children\n  return (\n    <div\n      {...parentProps}\n      className={\n        youtubeContainer + ' youtube-container'\n        // 'youtube-container' + (typeof props.className == 'string' ? ' ' + props.className : '')\n      }>\n      {!isOpen ? (\n        <Fragment>\n          <img\n            onClick={() => setOpen(true)}\n            src={\n              props.hasOwnProperty('thumbnail')\n                ? props.thumbnail\n                : `https://img.youtube.com/vi/${url}/hqdefault.jpg`\n            }\n            alt=\"Youtube Video\"\n          />\n          <span>‚ñ∂</span>\n        </Fragment>\n      ) : null}\n      <iframe\n        className={popout + (isOpen ? '' : ' ' + disabled)}\n        src={isOpen ? videoURL : null}\n        title=\"YouTube video player\"\n        frameBorder=\"0\"\n        sandbox=\"allow-scripts allow-same-origin\"\n        allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n        allowFullScreen\n      />\n    </div>\n  )\n}\n\nexport default YTVideo\n","import HoverDefinition from '../../HoverDefinition'\n\nconst Scope = props => (\n  <HoverDefinition\n    definition={`El \"scope\" es el tama√±o de las funciones y tareas de un proyecto.`}\n    {...props}\n  >\n    {props.children || 'scope'}\n  </HoverDefinition>\n)\n\nexport default Scope\n","import CodeSandbox from '../../components/CodeSandbox'\nimport BooleanDef from '../../components/Dictionary/es/BooleanDef'\nimport Expression from '../../components/Dictionary/es/Expression'\nimport FunctionDef from '../../components/Dictionary/es/FunctionDef'\nimport RPG from '../../components/Dictionary/es/RPG'\nimport Scope from '../../components/Dictionary/es/Scope'\nimport StringDef from '../../components/Dictionary/es/StringDef'\nimport Variable from '../../components/Dictionary/es/Variable'\nimport Link from '../../components/TranslatedLink'\nimport YTVideo from '../../components/YTVideo'\nimport { play } from '../../styles/rpg/communication.module.scss'\nimport { Helmet } from 'react-helmet'\n\nexport default function Communication() {\n  return (\n    <div className=\"communication\">\n      <Helmet>\n        <title>üó£Ô∏è Comunicarse con el jugador</title>\n        <meta name=\"description\" content=\"Aprende a comunicarte con el jugador de tu juego\" />\n      </Helmet>\n      <h2>#4.1 üó£Ô∏è Comunicarse con el jugador</h2>\n      <span className=\"introCard\">\n        <YTVideo\n          url=\"7yeA7a0uS3A\"\n          query={{ start: 29, cc_lang_pref: 'es', cc_load_policy: '1' }}\n          thumbnail=\"/images/heman-title.jpg\"\n        />\n        Mitad drag√≥n mitad tigre se vende por separado\n      </span>\n      <p>\n        Ahora que hemos establecido los conceptos b√°sicos, apliqu√©monos y divirt√°monos un poco üòä\n        Antes de ti construye tu <RPG /> primero debemos aprender c√≥mo obtener informaci√≥n y enviar\n        mensajes al jugador. No sirve de nada codificar una aventura si no hay forma de interactuar\n        con ella.\n      </p>\n      <div className=\"comments\">\n        <h2>Comments</h2>\n        <p>\n          Los comentarios nos permiten escribir cosas en nuestro c√≥digo que son puramente para\n          notaci√≥n (como escribir notas en matem√°ticas). Cualquier cosa en la misma l√≠nea que venga\n          despu√©s de \"//\" no se usar√° mientras se ejecuta el c√≥digo.\n          <br />\n          <br />\n          Podemos usar comentarios para cosas como agregar un mensaje TODO para que pueda volver a\n          agregar algo m√°s tarde, o podemos usarlo para ayudar a explicar c√≥mo funciona nuestro\n          c√≥digo.\n        </p>\n        <CodeSandbox\n          value={'console.log(4 + 6)\\n// Esta parte no tiene que ser un c√≥digo JavaScript v√°lido'}\n          consoleMode\n          disableAutoRun\n          className=\"mini\"\n        />\n      </div>\n      <div className=\"js-io\">\n        <h2>Input/Output para comunicarse con el reproductor</h2>\n        <p>\n          Si bien la modificaci√≥n del contenido de una p√°gina web (realizada a trav√©s de HTML) est√°\n          fuera del <Scope /> de este proyecto, ¬°a√∫n podemos comunicarnos con el reproductor desde\n          JavaScript! Podemos hacer esto usando las funciones de aviso y alerta. A partir de ahora,\n          si desea ejecutar el c√≥digo en los editores,{' '}\n          <span className=\"bold\">\n            primero debe presionar el bot√≥n <span className={play}>‚ñ∂</span>\n          </span>\n          . Intente ejecutar los siguientes ejemplos:\n        </p>\n        <h3>Output: Alert</h3>\n        <CodeSandbox\n          value=\"alert('Tu princesa esta en otro castillo')\"\n          consoleMode\n          disableAutoRun\n          className=\"mini\"\n        />\n        <h3>Input: Prompt</h3>\n        <p>\n          Podemos pedirle a un usuario una entrada y guardarla en una <Variable /> para usarla m√°s\n          tarde\n        </p>\n        <CodeSandbox\n          value={\n            \"var nombre = prompt('¬øCu√°l es su nombre?')\\nalert('Dese√°ndole buena suerte a ' + nombre + ' üí∞')\"\n          }\n          consoleMode\n          disableAutoRun\n          className=\"mini\"\n        />\n        <p>\n          Nota: En el desarrollo web normal, se desaconseja el uso de las funciones de alerta y\n          aviso. Esto se debe a que crear un di√°logo dentro de la p√°gina (usando HTML) en lugar de\n          dentro de los cuadros emergentes de los navegadores son menos discordantes.\n        </p>\n      </div>\n      <div className=\"flow-control\">\n        <h2>Flow Control</h2>\n        <p>\n          El control de flujo nos permite establecer opciones de ramificaci√≥n en nuestro modelo\n          l√≥gico usando l√≥gica <BooleanDef />. Puede decir algo como \"si x es cierto, entonces haga\n          y, o de lo contrario haga z\". Nos permite crear un c√≥digo flexible que elige la ruta\n          adecuada para completar correctamente la tarea. Puede leer m√°s sobre el control de flujo{' '}\n          <a\n            target=\"_blank\"\n            href=\"https://vanessamarely.medium.com/estructuras-de-control-de-flujo-en-javascript-c848337a5c02\"\n          >\n            aqu√≠.\n          </a>\n          <br />\n        </p>\n        <h3>if/else</h3>\n        <p>\n          Puede usar combinaciones de if y else para crear poderosos modelos de toma de decisiones\n          usando <Expression>expressions</Expression> que devuelven{' '}\n          <BooleanDef>booleans</BooleanDef> para hacer preguntas de s√≠ o no. Aqu√≠ tenemos un ejemplo\n          de hacer algo basado en la entrada del usuario\n        </p>\n        <CodeSandbox\n          value={\n            '// Tenga en cuenta que cualquier espacio o may√∫sculas har√° que la igualdad falle, por lo que \"S√ç\" dar√° un resultado incorrecto\\nif(prompt(\"¬øTe gustan las galletas de avena con pasas?\") === \"yes\") { \\n    alert(\"Tienes buen gusto para las üç™\")\\n} else { // Ellas entraron en cualquier cosa adem√°s de exactamente \"s√≠\".\\n    alert(\"¬øQuiz√°s las üç™ no son lo tuyo?\")\\n}'\n          }\n          consoleMode\n          disableAutoRun\n          className=\"short\"\n        />\n        <p>Tambi√©n podemos encadenar m√∫ltiples si para tener m√∫ltiples resultados.</p>\n\n        <CodeSandbox\n          value={\n            'var galletaFavorita = prompt(\"¬øCu√°l es tu tipo de galleta favorita?\")\\nif(galletaFavorita === \"avena\" || galletaFavorita === \"avena con pasas\") { \\n    alert(\"Tienes buen gusto para las üç™\")\\n} else if (galletaFavorita === \"chispas de chocolate\") {\\n    alert(\"La chispa de chocolate es la segunda mejor üç™, as√≠ que es comprensible\")\\n} else {\\n    alert(\"¬øQuiz√°s las üç™ no son lo tuyo?\")\\n}'\n          }\n          consoleMode\n          disableAutoRun\n          className=\"short\"\n        />\n        <h3>while</h3>\n        <p>\n          Puede usar el bucle while para seguir haciendo algo hasta que la <BooleanDef />{' '}\n          <Expression /> devuelva falso. Mire aqu√≠ c√≥mo podemos pedir repetidamente al usuario su\n          nombre hasta que devuelva un nombre v√°lido (si falta un nombre, no es v√°lido, si el\n          usuario sale del mensaje, el mensaje devuelve nulo, por lo que debemos volver a\n          intentarlo).\n        </p>\n        <CodeSandbox\n          disableAutoRun\n          consoleMode\n          value={`var nombre\\nwhile(!nombre) {\\n    nombre = prompt(\"¬øCu√°l es su nombre?\")\\n}\\nalert(alert(\"Te despiertas en una playa extra√±a. '\" + nombre + \" est√° escrito en el interior de tu camisa.\"))\\n}`}\n          className=\"short\"\n        />\n      </div>\n      <div>\n        <h2>Better text Handling</h2>\n        <p>\n          Cre√© esta <FunctionDef /> para ayudarlo a asegurarse de recibir una entrada v√°lida. Las\n          cadenas proporcionan <FunctionDef /> .trim(...) para eliminar todos los espacios al\n          principio y al final. Aqu√≠ comprobamos que la cadena recortada tiene al menos 1 car√°cter\n          de largo (lo que significa que hay al menos 1 sin espacio personaje). Luego devolvemos la\n          cadena recortada ya que probablemente no nos importen los espacios y puede dificultar la\n          coincidencia de cadenas m√°s adelante (por ejemplo, \"yes\" === \"yes\" devolver√° false, pero\n          si recortamos el texto no tenemos este problema)\n        </p>\n        <CodeSandbox\n          disableAutoRun\n          consoleMode\n          value={`function avisoInteligente(pregunta) {\n    var output = null\n    // While seguir√° ejecutando el c√≥digo dentro de √©l una y otra vez hasta que la expression se eval√∫e como false\n    while(output === null || output.trim().length < 1) { \n        output = prompt(pregunta)\n    }\n    return output.trim()\n}\n\nvar nombre = avisoInteligente(\"\")\n\nalert(\"Te despiertas en una playa extra√±a. '\" + nombre + \" est√° escrito en el interior de tu camisa.\")`}\n        />\n        <p>\n          Consola Ejecute el programa para ver su salida Aqu√≠ combinamos la <FunctionDef />{' '}\n          .toLowerCase (puede usarla para convertir cualquier <StringDef /> en min√∫sculas) y nuestra{' '}\n          <FunctionDef /> avisoInteligente. Observe c√≥mo, cuando lo ejecutamos, a√∫n reconoce una\n          entrada de s√≠, incluso si tiene espacios en blanco alrededor o no est√° en min√∫sculas.\n        </p>\n        <CodeSandbox\n          value={`function avisoInteligente(pregunta) {\n    var output = null\n    while(output === null || output.trim().length < 1) {\n        output = prompt(pregunta)\n    }\n    return output.trim()\n}\n// Ahora acepta \"  si  \", \"SI\", \"  sI   \", etc√©tera\nif(avisoInteligente(\"¬øTe gustan las galletas de avena con pasas?\").toLowerCase() === \"si\") { \\n    alert(\"Tienes buen gusto para las üç™\")\\n} else {\\n    alert(\"¬øQuiz√°s las üç™ no son lo tuyo?\")\\n}`}\n          consoleMode\n          disableAutoRun\n        />\n      </div>\n      <Link className=\"next\" to=\"/rpg/publishing\">\n        Siguiente: #4.2 üèÜ Compartiendo tu juego RPG\n      </Link>\n    </div>\n  )\n}\n","// extracted by mini-css-extract-plugin\nexport var play = \"communication-module--play--RhN+L\";"],"names":["props","definition","children","urlRegex","url","useState","isOpen","setOpen","query","hasOwnProperty","Object","keys","length","Error","console","warn","autoplay","test","videoURL","entries","map","key","value","encodeURIComponent","join","parentProps","className","youtubeContainer","Fragment","onClick","src","thumbnail","alt","title","frameBorder","sandbox","allow","allowFullScreen","HoverDefinition","Communication","Helmet","name","content","YTVideo","start","cc_lang_pref","cc_load_policy","RPG","CodeSandbox","consoleMode","disableAutoRun","play","Variable","BooleanDef","target","href","Expression","FunctionDef","StringDef","to"],"sourceRoot":""}