import CodeSandbox from '../../components/CodeSandbox'
import Expression from '../../components/Dictionary/es/Expression'
import FunctionDef from '../../components/Dictionary/es/FunctionDef'
import Input from '../../components/Dictionary/es/Input'
import Interpreter from '../../components/Dictionary/es/Interpreter'
import JS from '../../components/Dictionary/es/JS'
import Output from '../../components/Dictionary/es/Output'
import Variable from '../../components/Dictionary/es/Variable'
import ShittyChecking from '../../components/ShittyChecking'
import Link from '../../components/TranslatedLink'
import YTVideo from '../../components/YTVideo'
import { Helmet } from 'react-helmet'

export default function EssentialTools() {
  return (
    <div>
      <Helmet>
        <title>游댣 Herramientas esenciales</title>
      </Helmet>
      <h1>#3.2 游댣 Herramientas esenciales</h1>
      {
        null /*<span className="introCard">
        <YTVideo url="himmatLe7aQ" query={{ start: 32 }} thumbnail="/images/melinda-mae.jpg" />
        <span>How do you swallow a coding lesson? One byte at a time</span>
      </span> */
      }

      <p>
        Probablemente tenga mucha informaci칩n en su cabeza de la 칰ltima secci칩n, intente hacer todo
        lo posible para conectar esa informaci칩n con las pr칩ximas tareas. En esta secci칩n
        aprenderemos algunas herramientas 游댣 que nos ayudar치n a construir modelos l칩gicos en
        JavaScript de manera m치s efectiva. 춰Una vez que termines esta secci칩n, conocer치s la
        codificaci칩n b치sica! Si te sientes abrumado, considera tomarte un descanso.
        <br />
        <br />
        Tambi칠n usaremos el modo "terminal" en lugar del modo "<Expression /> evaluator" en nuestros
        editores, por lo que ver치 algunas cosas que dicen "console.log (...)", y la <Output /> de
        nuestro programa ser치 lo que est칠 dentro del parenthesis ( esto se llama una <FunctionDef />
        , hay m치s sobre esto a continuaci칩n).
      </p>
      <div>
        <h2>Variables</h2>
        <p>
          Podemos crear <Variable>variables</Variable> para almacenar (guardar) valores de datos
          para su uso posterior. En un modelo l칩gico b치sico en el que solo tenemos{' '}
          <Input>inputs</Input> y <Output>outputs</Output>, se vuelve incre칤blemente dif칤cil tratar
          con datos que persisten (deben guardarse). Digamos que est치 escribiendo una aplicaci칩n de
          cuenta corriente, pero no puede guardar ning칰n dato. El usuario puede ver una notificaci칩n
          que dice "Acabas de gastar $ 10.52" y, sin embargo, cada vez que abre la aplicaci칩n es
          recibido con esto:
          <br />
          <span className="bold">(intenta usar la aplicaci칩n a continuaci칩n)</span>
        </p>

        <ShittyChecking />

        <p>
          춰Esto ser칤a tan molesto! En lugar de hacer esto, almacenamos{' '}
          <Variable>variables</Variable> en nuestra memoria (o en este caso, en la memoria de la
          computadora) d치ndoles nombres, y luego podemos recuperarlas o modificarlas m치s adelante
          cuando las necesitemos.
          <br />
          <br />
          Aqu칤 nombramos una <Variable /> llamada saldo (tenga en cuenta que todav칤a no le damos
          ning칰n valor, por lo que por defecto es undefined)
        </p>
        <CodeSandbox className="mini" value={'var balance\nconsole.log(balance)'} consoleMode />
        <p>
          Podemos establecer un valor usando el operador de asignaci칩n "=" y poniendo el valor que
          queremos despu칠s, y una vez que hayamos hecho esto, podemos ver que nuestra <Variable />{' '}
          tiene un valor ahora :)
        </p>
        <CodeSandbox
          className="mini"
          value={'var balance = 14.24\nconsole.log(balance)'}
          consoleMode
        />
      </div>
      <div className="functions">
        <h2>Functions</h2>
        <p>
          Las <FunctionDef>functions</FunctionDef> le permiten crear piezas de c칩digo reutilizables
          que sirven como herramienta (como un modelo de c칩mo hacer algo). Las funciones tienen un
          nombre, un conjunto de <Input>inputs</Input>, una secci칩n de c칩digo y una{' '}
          <Output>output</Output> (usamos "retorno" para especificar la <Output>output</Output>).
          Las <FunctionDef>functions</FunctionDef> pueden ahorrarle mucho tiempo porque puede
          reutilizar su <FunctionDef>function</FunctionDef> varias veces con diferentes{' '}
          <Input>Inputs</Input>, en lugar de tener que escribir ese c칩digo una y otra vez. Las{' '}
          <FunctionDef>functions</FunctionDef> usan parenthesis para crear sus <Input>inputs</Input>{' '}
          y corchetes (se ven as칤 {}). Despu칠s de haber creado nuestra <FunctionDef />, usamos
          parenthesis nuevamente para llamarla (llamar a una <FunctionDef /> significa ejecutarla).
          La parte "console.log" de nuestro c칩digo es un ejemplo de una <FunctionDef /> (en este
          caso, para <Output /> algunos datos). Esta <FunctionDef>function</FunctionDef> no tiene
          que ser creada por nosotros porque el <Interpreter>JS Interpreter</Interpreter> nos la
          proporciona autom치ticamente. Se llama (llamar a una <FunctionDef>function</FunctionDef>{' '}
          significa ejecutarla) con parenthesis y puede hacer diferentes cosas dependiendo de cu치l
          sea la <Input /> que le pongamos (que en el ejemplo anterior era el valor actual de la{' '}
          <Variable /> balance).
        </p>
        <h2>Addition Function</h2>
        <p>
          Si bien esta <FunctionDef /> es en su mayor칤a redundante, podr칤a crear f치cilmente una{' '}
          <FunctionDef /> para sumar dos n칰meros.
        </p>
        <CodeSandbox
          consoleMode
          value={'function agregar(a, b){\n    return a + b\n}'}
          className="short"
        />
        <p>
          El <Output /> est치 vac칤o porque no registramos nada en la consola.
        </p>
      </div>
      <div className="console">
        <h2>More about the Console</h2>
        M치s sobre la Consola En la p치gina anterior, estaba usando el "Evaluador de expresiones de
        JavaScript". A la derecha, ver치 qu칠 <Output /> del <Interpreter>
          JS interpreter
        </Interpreter>{' '}
        eval칰a el c칩digo en el lado izquierdo. Normalmente, cuando codificamos, ejecutamos nuestro
        c칩digo desde una terminal y vemos el resultado de la <FunctionDef /> console.log en tiempo
        real en lugar de ver el resultado de la evaluaci칩n del c칩digo <JS />. Solo necesitamos
        generar valores usando console.log cuando nosotros, como desarrolladores (o codificadores),
        queremos saber cu치les son esos valores, de esa manera la <Output /> de nuestro programa no
        se abarrota demasiado.
      </div>
      <CodeSandbox
        consoleMode
        value={'function agregar(a, b){\n    return a + b\n}\nconsole.log(agregar(14, 16))'}
        className="short"
      />
      <div className="parenthesis">
        <h2>Parenthesis</h2>
        Par칠ntesis No solo puede usar parenthesis para cambiar el orden de las{' '}
        <Expression>expressions</Expression> matem치ticas, sino que tambi칠n puede usar parenthesis
        para cambiar el orden de cualquier otro tipo de <Expression />. Estos son algunos ejemplos
        de c칩mo cambiar el orden de evaluaci칩n del c칩digo usando parenthesis para fines matem치ticos
        y no matem치ticos.
        <br />
        <br />
        <h3>Matem치ticas sin parenthesis</h3>
        <CodeSandbox consoleMode value="console.log(10 * 3 + 4)" className="mini" />
        <h3>Matem치ticas con parenthesis</h3>
        <CodeSandbox consoleMode value="console.log(10 * (3 + 4))" className="mini" />
        <h3>L칩gica Boolean sin parenthesis</h3>
        <CodeSandbox consoleMode value="console.log(false && true || true)" className="mini" />
        <h3>L칩gica Boolean sin parenthesis</h3>
        <CodeSandbox consoleMode value="console.log(false && (true || true))" className="mini" />
      </div>
      <br />
      <Link className="next" to="/rpg">
        Siguiente: #4.0 Construyendo un juego!
      </Link>
    </div>
  )
}
