import CodeSandbox from '../../components/CodeSandbox'
import BooleanDef from '../../components/Dictionary/es/BooleanDef'
import Expression from '../../components/Dictionary/es/Expression'
import FunctionDef from '../../components/Dictionary/es/FunctionDef'
import RPG from '../../components/Dictionary/es/RPG'
import Scope from '../../components/Dictionary/es/Scope'
import StringDef from '../../components/Dictionary/es/StringDef'
import Variable from '../../components/Dictionary/es/Variable'
import Link from '../../components/TranslatedLink'
import YTVideo from '../../components/YTVideo'
import { play } from '../../styles/rpg/communication.module.scss'
import { Helmet } from 'react-helmet'

export default function Communication() {
  return (
    <div className="communication">
      <Helmet>
        <title>üó£Ô∏è Comunicarse con el jugador</title>
        <meta name="description" content="Aprende a comunicarte con el jugador de tu juego" />
      </Helmet>
      <h2>#4.1 üó£Ô∏è Comunicarse con el jugador</h2>
      <span className="introCard">
        <YTVideo
          url="7yeA7a0uS3A"
          query={{ start: 29, cc_lang_pref: 'es', cc_load_policy: '1' }}
          thumbnail="/images/heman-title.jpg"
        />
        Mitad drag√≥n mitad tigre se vende por separado
      </span>
      <p>
        Ahora que hemos establecido los conceptos b√°sicos, apliqu√©monos y divirt√°monos un poco üòä
        Antes de ti construye tu <RPG /> primero debemos aprender c√≥mo obtener informaci√≥n y enviar
        mensajes al jugador. No sirve de nada codificar una aventura si no hay forma de interactuar
        con ella.
      </p>
      <div className="comments">
        <h2>Comments</h2>
        <p>
          Los comentarios nos permiten escribir cosas en nuestro c√≥digo que son puramente para
          notaci√≥n (como escribir notas en matem√°ticas). Cualquier cosa en la misma l√≠nea que venga
          despu√©s de "//" no se usar√° mientras se ejecuta el c√≥digo.
          <br />
          <br />
          Podemos usar comentarios para cosas como agregar un mensaje TODO para que pueda volver a
          agregar algo m√°s tarde, o podemos usarlo para ayudar a explicar c√≥mo funciona nuestro
          c√≥digo.
        </p>
        <CodeSandbox
          value={'console.log(4 + 6)\n// Esta parte no tiene que ser un c√≥digo JavaScript v√°lido'}
          consoleMode
          disableAutoRun
          className="mini"
        />
      </div>
      <div className="js-io">
        <h2>Input/Output para comunicarse con el reproductor</h2>
        <p>
          Si bien la modificaci√≥n del contenido de una p√°gina web (realizada a trav√©s de HTML) est√°
          fuera del <Scope /> de este proyecto, ¬°a√∫n podemos comunicarnos con el reproductor desde
          JavaScript! Podemos hacer esto usando las funciones de aviso y alerta. A partir de ahora,
          si desea ejecutar el c√≥digo en los editores,{' '}
          <span className="bold">
            primero debe presionar el bot√≥n <span className={play}>‚ñ∂</span>
          </span>
          . Intente ejecutar los siguientes ejemplos:
        </p>
        <h3>Output: Alert</h3>
        <CodeSandbox
          value="alert('Tu princesa esta en otro castillo')"
          consoleMode
          disableAutoRun
          className="mini"
        />
        <h3>Input: Prompt</h3>
        <p>
          Podemos pedirle a un usuario una entrada y guardarla en una <Variable /> para usarla m√°s
          tarde
        </p>
        <CodeSandbox
          value={
            "var nombre = prompt('¬øCu√°l es su nombre?')\nalert('Dese√°ndole buena suerte a ' + nombre + ' üí∞')"
          }
          consoleMode
          disableAutoRun
          className="mini"
        />
        <p>
          Nota: En el desarrollo web normal, se desaconseja el uso de las funciones de alerta y
          aviso. Esto se debe a que crear un di√°logo dentro de la p√°gina (usando HTML) en lugar de
          dentro de los cuadros emergentes de los navegadores son menos discordantes.
        </p>
      </div>
      <div className="flow-control">
        <h2>Flow Control</h2>
        <p>
          El control de flujo nos permite establecer opciones de ramificaci√≥n en nuestro modelo
          l√≥gico usando l√≥gica <BooleanDef />. Puede decir algo como "si x es cierto, entonces haga
          y, o de lo contrario haga z". Nos permite crear un c√≥digo flexible que elige la ruta
          adecuada para completar correctamente la tarea. Puede leer m√°s sobre el control de flujo{' '}
          <a
            target="_blank"
            href="https://vanessamarely.medium.com/estructuras-de-control-de-flujo-en-javascript-c848337a5c02"
          >
            aqu√≠.
          </a>
          <br />
        </p>
        <h3>if/else</h3>
        <p>
          Puede usar combinaciones de if y else para crear poderosos modelos de toma de decisiones
          usando <Expression>expressions</Expression> que devuelven{' '}
          <BooleanDef>booleans</BooleanDef> para hacer preguntas de s√≠ o no. Aqu√≠ tenemos un ejemplo
          de hacer algo basado en la entrada del usuario
        </p>
        <CodeSandbox
          value={
            '// Tenga en cuenta que cualquier espacio o may√∫sculas har√° que la igualdad falle, por lo que "S√ç" dar√° un resultado incorrecto\nif(prompt("¬øTe gustan las galletas de avena con pasas?") === "yes") { \n    alert("Tienes buen gusto para las üç™")\n} else { // Ellas entraron en cualquier cosa adem√°s de exactamente "s√≠".\n    alert("¬øQuiz√°s las üç™ no son lo tuyo?")\n}'
          }
          consoleMode
          disableAutoRun
          className="short"
        />
        <p>Tambi√©n podemos encadenar m√∫ltiples si para tener m√∫ltiples resultados.</p>

        <CodeSandbox
          value={
            'var galletaFavorita = prompt("¬øCu√°l es tu tipo de galleta favorita?")\nif(galletaFavorita === "avena" || galletaFavorita === "avena con pasas") { \n    alert("Tienes buen gusto para las üç™")\n} else if (galletaFavorita === "chispas de chocolate") {\n    alert("La chispa de chocolate es la segunda mejor üç™, as√≠ que es comprensible")\n} else {\n    alert("¬øQuiz√°s las üç™ no son lo tuyo?")\n}'
          }
          consoleMode
          disableAutoRun
          className="short"
        />
        <h3>while</h3>
        <p>
          Puede usar el bucle while para seguir haciendo algo hasta que la <BooleanDef />{' '}
          <Expression /> devuelva falso. Mire aqu√≠ c√≥mo podemos pedir repetidamente al usuario su
          nombre hasta que devuelva un nombre v√°lido (si falta un nombre, no es v√°lido, si el
          usuario sale del mensaje, el mensaje devuelve nulo, por lo que debemos volver a
          intentarlo).
        </p>
        <CodeSandbox
          disableAutoRun
          consoleMode
          value={`var nombre\nwhile(!nombre) {\n    nombre = prompt("¬øCu√°l es su nombre?")\n}\nalert(alert("Te despiertas en una playa extra√±a. '" + nombre + " est√° escrito en el interior de tu camisa."))\n}`}
          className="short"
        />
      </div>
      <div>
        <h2>Better text Handling</h2>
        <p>
          Cre√© esta <FunctionDef /> para ayudarlo a asegurarse de recibir una entrada v√°lida. Las
          cadenas proporcionan <FunctionDef /> .trim(...) para eliminar todos los espacios al
          principio y al final. Aqu√≠ comprobamos que la cadena recortada tiene al menos 1 car√°cter
          de largo (lo que significa que hay al menos 1 sin espacio personaje). Luego devolvemos la
          cadena recortada ya que probablemente no nos importen los espacios y puede dificultar la
          coincidencia de cadenas m√°s adelante (por ejemplo, "yes" === "yes" devolver√° false, pero
          si recortamos el texto no tenemos este problema)
        </p>
        <CodeSandbox
          disableAutoRun
          consoleMode
          value={`function avisoInteligente(pregunta) {
    var output = null
    // While seguir√° ejecutando el c√≥digo dentro de √©l una y otra vez hasta que la expression se eval√∫e como false
    while(output === null || output.trim().length < 1) { 
        output = prompt(pregunta)
    }
    return output.trim()
}

var nombre = avisoInteligente("")

alert("Te despiertas en una playa extra√±a. '" + nombre + " est√° escrito en el interior de tu camisa.")`}
        />
        <p>
          Consola Ejecute el programa para ver su salida Aqu√≠ combinamos la <FunctionDef />{' '}
          .toLowerCase (puede usarla para convertir cualquier <StringDef /> en min√∫sculas) y nuestra{' '}
          <FunctionDef /> avisoInteligente. Observe c√≥mo, cuando lo ejecutamos, a√∫n reconoce una
          entrada de s√≠, incluso si tiene espacios en blanco alrededor o no est√° en min√∫sculas.
        </p>
        <CodeSandbox
          value={`function avisoInteligente(pregunta) {
    var output = null
    while(output === null || output.trim().length < 1) {
        output = prompt(pregunta)
    }
    return output.trim()
}
// Ahora acepta "  si  ", "SI", "  sI   ", etc√©tera
if(avisoInteligente("¬øTe gustan las galletas de avena con pasas?").toLowerCase() === "si") { \n    alert("Tienes buen gusto para las üç™")\n} else {\n    alert("¬øQuiz√°s las üç™ no son lo tuyo?")\n}`}
          consoleMode
          disableAutoRun
        />
      </div>
      <Link className="next" to="/rpg/publishing">
        Siguiente: #4.2 üèÜ Compartiendo tu juego RPG
      </Link>
    </div>
  )
}
