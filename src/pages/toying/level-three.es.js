import LevelThreeGame from '../../components/BooleanGame/levels/LevelThree'
import BooleanDef from '../../components/Dictionary/es/BooleanDef'
import Expression from '../../components/Dictionary/es/Expression'
import Operator from '../../components/Dictionary/es/Operator'
import Syntax from '../../components/Dictionary/es/Syntax'
import Link from '../../components/TranslatedLink'
import YTVideo from '../../components/YTVideo'
import { Helmet } from 'react-helmet'

export default function LevelThree() {
  return (
    <div className="level-3">
      <Helmet>
        <title>üíª Booleans para aplicaciones de codificaci√≥n</title>
        <meta name="description" content="Una revisi√≥n de rompecabezas de la l√≥gica booleana" />
      </Helmet>
      <h2>#2.3 üíª Booleans para aplicaciones de codificaci√≥n</h2>
      <br />
      <p>
        ¬øC√≥mo se relaciona la l√≥gica <BooleanDef /> con la codificaci√≥n? Cuando un programador est√°
        codificando, escribe en un lenguaje especial llamado <Syntax />. Cada lenguaje de
        codificaci√≥n puede tener diferentes <Syntax>syntaxes</Syntax>, pero en √∫ltima instancia, son
        solo diferentes formas de representar nuestros modelos l√≥gicos utilizando c√≥digo.
        <br />
        <br />
        En lugar de escribir enormes combinaciones de OR, NOT y otros <Operator>
          operators
        </Operator>{' '}
        l√≥gicos, los ingenieros de software crearon convenientemente lenguajes de codificaci√≥n con
        caracter√≠sticas que nos permiten decir lo que estamos tratando de hacer m√°s f√°cilmente. De
        hecho, casi todos los lenguajes de codificaci√≥n tienen soporte para l√≥gica <BooleanDef />{' '}
        incorporada, que es una parte esencial de su kit de herramientas como codificador.
        <br />
        <br />
        He preparado un desaf√≠o final en caso de que desee probar sus habilidades en el juego de
        combinaci√≥n una vez m√°s antes de proceder a hablar sobre codificaci√≥n.
      </p>
      <LevelThreeGame />
      <br />
      <p>
        Es posible que haya notado que cuando se le da un <Operator /> NOT con m√∫ltiples valores, a
        veces es m√°s f√°cil pensar en √©l como una simple solicitud de lo que falta. Este es un
        ejemplo de c√≥mo podemos construir reglas m√°s complejas a partir de sistemas simplistas.
        Escribir un buen software consiste en aprender a crear aplicaciones con capacidades
        complejas sin hacer que el c√≥digo en s√≠ sea demasiado complejo o desordenado.
        <br />
        <br />
        Al igual que hablar cualquier idioma (humano o m√°quina), aprender a expresarse mejor
        (mediante el uso de c√≥digo limpio y buenas pr√°cticas de dise√±o) le permite decir m√°s
        mientras escribe menos. Dedicar m√°s tiempo a pensar en su c√≥digo desde una perspectiva de
        dise√±o le permitir√° ahorrar innumerables horas lidiando con errores que entumecen la mente y
        otros problemas.
      </p>
      <p>
        Muchos lenguajes de codificaci√≥n tienen la capacidad de comparar y transformar otros tipos
        de datos m√°s avanzados que los <BooleanDef>booleans</BooleanDef>, lo cual es muy poderoso.
        Podemos hacer cosas como evaluar <Expression>expressions</Expression> matem√°ticas, comparar
        texto y m√°s. Mire este video para ver esto en la pr√°ctica y para ver la relaci√≥n entre la
        l√≥gica <BooleanDef /> y los modelos mentales de codificaci√≥n.
      </p>
      <YTVideo url="_j9nvYKaOVE" thumbnail="/images/cs-discoveries.jpg" />
      <Link className="next" to="/coding">
        Siguiente: #3.0 üõ£Ô∏è Aprendiendo a codificar
      </Link>
    </div>
  )
}
