import LevelThreeGame from '../../components/BooleanGame/levels/LevelThree'
import BooleanDef from '../../components/Dictionary/es/BooleanDef'
import Expression from '../../components/Dictionary/es/Expression'
import Operator from '../../components/Dictionary/es/Operator'
import Syntax from '../../components/Dictionary/es/Syntax'
import Link from '../../components/TranslatedLink'
import YTVideo from '../../components/YTVideo'
import { Helmet } from 'react-helmet'

export default function LevelThree() {
  return (
    <div className="level-3">
      <Helmet>
        <title>üíª Booleans for Apps</title>
      </Helmet>
      <h2>#2.3 üíª Booleans for coding Apps</h2>
      <br />
      <p>
        ¬øC√≥mo se relaciona la l√≥gica <BooleanDef /> con la codificaci√≥n? Cuando un programador est√°
        codificando, escribe en un lenguaje especial llamado <Syntax />. Cada lenguaje de
        codificaci√≥n puede tener diferentes <Syntax>syntaxes</Syntax>, pero en √∫ltima instancia, son
        solo diferentes formas de representar nuestros modelos l√≥gicos utilizando c√≥digo.
        <br />
        <br />
        En lugar de escribir enormes combinaciones de OR, NOT y otros <Operator>
          operators
        </Operator>{' '}
        l√≥gicos, los ingenieros de software crearon convenientemente lenguajes de codificaci√≥n con
        caracter√≠sticas que nos permiten decir lo que estamos tratando de hacer m√°s f√°cilmente. De
        hecho, casi todos los lenguajes de codificaci√≥n tienen soporte para l√≥gica <BooleanDef />{' '}
        incorporada, que es una parte esencial de su kit de herramientas como codificador.
        <br />
        <br />
        He preparado un desaf√≠o final en caso de que desee probar sus habilidades en el juego de
        combinaci√≥n una vez m√°s antes de proceder a hablar sobre codificaci√≥n.
      </p>
      <LevelThreeGame />
      <br />
      <p>
        You might have noticed that when given a NOT <Operator /> with multiple values, it is
        sometimes easier to think of it as simply a request for whatever is missing. This is an
        example of how we can build more complex rules from simplistic systems. Writing good
        software is about learning to create apps with complex capabilities without making the code
        itself overly complex or messy.
        <br />
        <br />
        Like speaking any language (human or machine), learning how to better express yourself (by
        using clean code and good design practices) allows you to say more while writing less.
        Spending more time to think about your code from a design perspective will allow you to save
        countless hours dealing with mind-numbing bugs and other issues.
      </p>
      <p>
        Many coding languages have the capabilities to compare and transform other kinds of data
        more advanced than <BooleanDef>booleans</BooleanDef>, which is very powerful. We can do
        things like evaluate math <Expression>expressions</Expression>, compare text, and more.
        Watch this video to see this in practice, and to see the relationship between the{' '}
        <BooleanDef /> logic and coding mental models.
      </p>
      <YTVideo url="_j9nvYKaOVE" thumbnail="/images/cs-discoveries.jpg" />
      <Link className="next" to="/coding">
        Siguiente: #3.0 üõ£Ô∏è Stepping into Coding
      </Link>
    </div>
  )
}
